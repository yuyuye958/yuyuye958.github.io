<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JavaScript中的MVC设计模式</title>
      <link href="/2018/10/10/MVC/"/>
      <url>/2018/10/10/MVC/</url>
      <content type="html"><![CDATA[<h2 id="JavaScript中的MVC"><a href="#JavaScript中的MVC" class="headerlink" title="JavaScript中的MVC"></a>JavaScript中的MVC</h2><p>MVC模式（Model–view–controller）是一种设计模式（或者软件架构），把系统分为三个基本部分：模型（Model）、视图（View）和控制器（Controller）。</p><ol><li><strong>Model</strong> 数据管理，主要负责和服务器进行交互。将请求到的数据传给Controller。</li><li><strong>View</strong> 负责用户界面，HTML 渲染。</li><li><strong>Controller</strong> 负责监听并处理View 的事件，更新和调用 Model；也负责监听 Model的变化（Model从服务器获得数据），并更新 View。Controller 控制其他所有流程。</li></ol><p><strong>画图来理解：</strong><br><img src="/2018/10/10/MVC/MVC.png" alt="MVC"></p><a id="more"></a><p>Model 和服务器交互，Model 将得到的数据交给 Controller，Controller 把数据填入 View，并监听 View<br>用户操作 View，如点击按钮，Controller 就会接受到点击事件，Controller 这时会去调用 Model，Model 会与服务器交互，得到数据后返回给 Controller，Controller 得到数据就去更新 View</p><hr><h2 id="MVC模式的优点"><a href="#MVC模式的优点" class="headerlink" title="MVC模式的优点"></a>MVC模式的优点</h2><p>就我的理解来说，MVC模式有这些好处：</p><ol><li>低耦合性。<br>每层各司其职，比如只需要改变视图层而不需要重新编译模型和控制器代码，改代码不用在各个部分改，只需要改变某部分的代码。</li><li>方便维护和修改。<br>视图层、数据层和业务逻辑层分开，结构清晰好理解。</li><li>大大提高代码的可重用性。<br>比如用不同的视图层访问模型的数据，只要在控制器层对数据格式做处理，而不需要修改模型层的代码。</li></ol><hr><h2 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h2><p>代码链接：<a href="https://github.com/yuyuye958/resume/blob/master/js/message.js" target="_blank" rel="noopener">https://github.com/yuyuye958/resume/blob/master/js/message.js</a></p><p>这段代码实现使用leanCloud的库来做留言板的功能。</p><ul><li>另外关于这段代码使用的立即执行函数和闭包，再介绍些题外话。</li></ul><h3 id="如何使用立即执行函数"><a href="#如何使用立即执行函数" class="headerlink" title="如何使用立即执行函数"></a>如何使用立即执行函数</h3><ol><li>我们不想要全局变量</li><li>我们要使用局部变量</li><li>ES 5 里面，只有函数有局部变量</li><li>于是我们声明一个 function xxx，然后 xxx.call()</li><li>这个时候 xxx 是全局变量（全局函数）</li><li>所以我们不能给这个函数名字</li><li>function(){}.call()</li><li>但是这样写 Chrome 会报错，语法错误</li><li>试出来一种方法可以不报错:<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span><span class="params">()</span><span class="comment">&#123;&#125;</span>.<span class="title">call</span><span class="params">()</span>  <span class="comment">//我们不在乎这个匿名函数的返回值，所以加个 ! 取反没关系</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="params">(<span class="keyword">function</span>()</span><span class="comment">&#123;&#125;</span>).<span class="title">call</span><span class="params">()</span> <span class="comment">//不推荐</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">xxx</span>    </span></span><br><span class="line"><span class="function"><span class="params">(<span class="keyword">function</span>()</span><span class="comment">&#123;&#125;</span>).<span class="title">call</span><span class="params">()</span> <span class="comment">//报错</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">allen12415145141556</span>.<span class="title">call</span><span class="params">()</span> <span class="comment">//用随机数，不推荐</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="如何使用闭包"><a href="#如何使用闭包" class="headerlink" title="如何使用闭包"></a>如何使用闭包</h3><ol><li>立即执行函数使得 变量person 无法被外部访问</li><li>闭包使得匿名函数可以操作 变量person</li><li>window.GrowUp 保存了匿名函数的地址</li><li>任何地方都可以使用 window.GrowUp<br>=&gt; 任何地方都可以使用 window.GrowUp 操作 person，但是不能直接访问 person<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> person = xxx</span><br><span class="line">    <span class="built_in">window</span>.GrowUp()&#123;</span><br><span class="line">        xxxxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.call()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原生JS封装jQuery的AJAX</title>
      <link href="/2018/10/08/jQuery-AJAX/"/>
      <url>/2018/10/08/jQuery-AJAX/</url>
      <content type="html"><![CDATA[<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><h3 id="设置请求request"><a href="#设置请求request" class="headerlink" title="设置请求request"></a>设置请求request</h3><p><strong>第一步</strong> <code>let request = new XMLHttpRequest()</code><br>第一部分：<br><code>request.open(&#39;GET&#39;, &#39;/xxx&#39;)</code><br>第二部分：(不能设置User-Agent，会报错)<br><code>request.setRequestHeader(&#39;Content-Type&#39;, &#39;x-www-form-urlencoded&#39;)</code><br>第四部分：<br><code>request.send(&#39;a=0&amp;b=1&#39;)</code></p><h3 id="获取响应response"><a href="#获取响应response" class="headerlink" title="获取响应response"></a>获取响应response</h3><p>第一部分：获取HTTP状态<br><code>request.status  //200</code><br><code>request.statusText  //OK</code></p><p>第二部分：获取响应header<br><code>request.getAllResponseHeaders()  //获取第二部分所有内容</code><br><code>request.getResponseHeader(&#39;Content-Type&#39;)  //获取Content-Type 的内容</code></p><p>第四部分：<br><code>request.responseText()</code></p><a id="more"></a><hr><h2 id="封装jQuery-ajax"><a href="#封装jQuery-ajax" class="headerlink" title="封装jQuery.ajax"></a>封装jQuery.ajax</h2><h3 id="初始版本"><a href="#初始版本" class="headerlink" title="初始版本"></a>初始版本</h3><p>封装：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> url = options.url</span><br><span class="line">    <span class="keyword">let</span> method = options.method</span><br><span class="line">    <span class="keyword">let</span> body = options.body</span><br><span class="line">    <span class="keyword">let</span> successFn = options.successFn</span><br><span class="line">    <span class="keyword">let</span> failFn = options.failFn</span><br><span class="line">    <span class="keyword">let</span> headers = options.headers</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    request.open(method, url)  <span class="comment">//初始化请求</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> headers)&#123;</span><br><span class="line">        <span class="keyword">let</span> value = headers[key]</span><br><span class="line">        request.setRequestHeader(key, value)</span><br><span class="line">    &#125;</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt;= <span class="number">300</span>)&#123;</span><br><span class="line">               successFn.call(<span class="literal">undefined</span>, request.responseText)</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">              failFn.call(<span class="literal">undefined</span>, request)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.send(body)  <span class="comment">//发送请求</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.$ = <span class="built_in">window</span>.jQuery</span><br></pre></td></tr></table></figure></p><p>调用：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">myButton.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(e)</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">        url: <span class="string">'/xxx'</span>, </span><br><span class="line">        method: <span class="string">'post'</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">            <span class="string">'allen'</span>: <span class="string">'23'</span></span><br><span class="line">        &#125; ,</span><br><span class="line">        body: <span class="string">'a=0&amp;b=1'</span>, </span><br><span class="line">        successFn: <span class="function"><span class="params">(x)</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(x)&#125;, </span><br><span class="line">        failFn: <span class="function"><span class="params">(x)</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(x)</span><br><span class="line">            <span class="built_in">console</span>.log(x.statusText)</span><br><span class="line">            <span class="built_in">console</span>.log(x.responseText)  <span class="regexp">//</span>请求失败也可以获取第四部分</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>此时代码很傻，下面来优化一下。</p><hr><h3 id="使用ES6语法解构赋值"><a href="#使用ES6语法解构赋值" class="headerlink" title="使用ES6语法解构赋值"></a>使用ES6语法解构赋值</h3><p>ES6新语法之解构赋值，见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">MDN文档</a> 。<br>优化后的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;url, method, body, successFn, failFn, headers&#125;</span>)</span>&#123;  <span class="comment">//解构赋值语法</span></span><br><span class="line">    <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    request.open(method, url)  <span class="comment">//初始化请求</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> headers)&#123;</span><br><span class="line">        <span class="keyword">let</span> value = headers[key]</span><br><span class="line">        request.setRequestHeader(key, value)</span><br><span class="line">    &#125;</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt;= <span class="number">300</span>)&#123;</span><br><span class="line">               successFn.call(<span class="literal">undefined</span>, request.responseText)</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">              failFn.call(<span class="literal">undefined</span>, request)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.send(body)  <span class="comment">//发送请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="使用promise优化"><a href="#使用promise优化" class="headerlink" title="使用promise优化"></a>使用promise优化</h3><p>因为每个程序员的回调名不一样，你不看文档根本不知道这个库的函数名是什么，所以我们可以使用该方法不设置successFn、failFn这两个函数的函数名。<br>返回一个promise对象，传入的两个参数resolve、reject，分别代表成功时执行的内容和失败时执行的内容。</p><p>再次优化后的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;url, method, body, headers&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;   <span class="comment">// 这行代码要记住</span></span><br><span class="line">        <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        request.open(method, url)  <span class="comment">//初始化请求</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> headers)&#123;</span><br><span class="line">            <span class="keyword">let</span> value = headers[key]</span><br><span class="line">            request.setRequestHeader(key, value)</span><br><span class="line">        &#125;</span><br><span class="line">        request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">               <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt;= <span class="number">300</span>)&#123;</span><br><span class="line">                  resolve.call(<span class="literal">undefined</span>, request.responseText)</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">                  reject.call(<span class="literal">undefined</span>, request)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        request.send(body)  <span class="comment">//发送请求</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">        url: <span class="string">'/xxx'</span>,</span><br><span class="line">        method: <span class="string">'post'</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">            <span class="string">'allen'</span>: <span class="string">'23'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="keyword">then</span>(</span><br><span class="line">        (responseText) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(responseText);</span><br><span class="line">            <span class="keyword">return</span> responseText;</span><br><span class="line">        &#125;,</span><br><span class="line">        (request) =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'error'</span>); <span class="keyword">return</span> <span class="string">'error'</span></span><br><span class="line">        &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>then返回也是promise对象，于是就有了链式操作。</p><h2 id="jQuery本身的ajax方法"><a href="#jQuery本身的ajax方法" class="headerlink" title="jQuery本身的ajax方法"></a>jQuery本身的ajax方法</h2><p>上面是我们模仿jQuery自己封装的ajax方法，下面来看看jQuery真正的ajax方法。<br>举例：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    dataType:<span class="string">'x-www-form-urlencoded'</span>,</span><br><span class="line">    data:<span class="string">'a=0&amp;b=1'</span>,</span><br><span class="line">    success:<span class="function"><span class="params">(responseText)</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(responseText)&#125;,</span><br><span class="line">    error:<span class="function"><span class="params">(e)</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="string">'error'</span>)&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    dataType:<span class="string">'json'</span>,</span><br><span class="line">    data:<span class="string">'a=0&amp;b=1'</span>,</span><br><span class="line">&#125;).<span class="keyword">then</span>(</span><br><span class="line">    (responseText)=&gt;&#123;<span class="built_in">console</span>.log(responseText)&#125;,</span><br><span class="line">    (e)=&gt;&#123;<span class="built_in">console</span>.log(<span class="string">'error'</span>)&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AJAX是什么？</title>
      <link href="/2018/10/06/AJAX/"/>
      <url>/2018/10/06/AJAX/</url>
      <content type="html"><![CDATA[<h2 id="AJAX的发展历史"><a href="#AJAX的发展历史" class="headerlink" title="AJAX的发展历史"></a>AJAX的发展历史</h2><h3 id="历史上发送请求的方式"><a href="#历史上发送请求的方式" class="headerlink" title="历史上发送请求的方式"></a>历史上发送请求的方式</h3><p>用 form 可以发请求，但是会刷新页面或新开页面<br>用 a 可以发 get 请求，但是也会刷新页面或新开页面<br>用 img 可以发 get 请求，但是只能以图片的形式展示<br>用 link 可以发 get 请求，但是只能以 CSS、favicon 的形式展示<br>用 script 可以发 get 请求，但是只能以脚本的形式运行<br><strong>以上都除了form都只能发get请求</strong></p><ul><li>所以需要一个能发任何请求（GET,POST,PUT,DELETE）并且想以什么形式展现就以什么形式展示的方法。后来就有了AJAX。</li></ul><h3 id="XMLHttpRequest的发明"><a href="#XMLHttpRequest的发明" class="headerlink" title="XMLHttpRequest的发明"></a>XMLHttpRequest的发明</h3><p>微软当时取得了重大突破：<br>IE 5 率先在 JS 中引入 ActiveX 对象（API），使得 JS 可以直接发起 HTTP 请求。<br>随后 Mozilla、 Safari、 Opera 也跟进了，取名 XMLHttpRequest，并被纳入 W3C 规范</p><a id="more"></a><hr><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>Jesse James Garrett 将下面的技术取名叫做 AJAX：异步的 JavaScript 和 XML (async JavaScript and XML)</p><ol><li>使用XMLHttpRequest发请求</li><li>服务器返回XML格式的字符串</li><li>JS解析XML，并局部更新页面</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;  <span class="comment">//尽量放在最上面，这样就不会错过任何变化，</span></span><br><span class="line">       <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;     <span class="comment">//如果放在request.send()之后，这时候readyState已经从0变为1，就只能捕获到2，3，4。</span></span><br><span class="line">           <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt;= <span class="number">300</span>)&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">'请求成功'</span>)</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">'请求失败'</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.open(<span class="string">'GET'</span>, <span class="string">'/xxx'</span>)  <span class="comment">//初始化请求</span></span><br><span class="line">    request.send()  <span class="comment">//发送请求</span></span><br></pre></td></tr></table></figure><p><strong>readyState：请求的五种状态</strong><br>0： 未打开 open()方法还未被调用<br>1： 未发送 send()方法还未被调用<br>2： 已经获取响应头 send()方法已经被调用，响应头和响应状态已经返回<br>3： 正在下载响应体 响应体下载中；responseText中已经获取了部分数据<br>4： 请求完成 整个请求过程完成</p><hr><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON是一门新的数据语言，抄袭了JavaScript。<br>区别：</p><ol><li>JSON没有抄袭 function、undefined和变量</li><li>JSON的字符串首尾必须是双引号 “ “</li></ol><table><thead><tr><th style="text-align:center">JavaScript</th><th style="text-align:center">JSON</th></tr></thead><tbody><tr><td style="text-align:center">undefined</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">null</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">[‘a’, ‘b’]</td><td style="text-align:center">[“a’, ‘b”]</td></tr><tr><td style="text-align:center">‘allen’</td><td style="text-align:center">“allen”</td></tr><tr><td style="text-align:center">{name: ‘allen’}</td><td style="text-align:center">{“name”: “allen”}</td></tr><tr><td style="text-align:center">function fn(){}</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">var a = {};a.self = a</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">&#95;&#95;proto&#95;&#95;</td><td style="text-align:center">无</td></tr></tbody></table><hr><h3 id="那么现在再结合前后端一起看一下代码"><a href="#那么现在再结合前后端一起看一下代码" class="headerlink" title="那么现在再结合前后端一起看一下代码"></a>那么现在再结合前后端一起看一下代码</h3><p>后端代码：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">path</span>===<span class="string">'/xxx'</span>)&#123;</span><br><span class="line">    response.statusCode = <span class="number">200</span></span><br><span class="line">    response.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'text/json;charset=utf-8'</span>)</span><br><span class="line">    response.setHeader(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://frank.com:8001'</span>)</span><br><span class="line">    response.<span class="built_in">write</span>(`</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"note"</span>:&#123;</span><br><span class="line">        <span class="string">"to"</span>: <span class="string">"frank"</span>,</span><br><span class="line">        <span class="string">"from"</span>: <span class="string">"allens"</span>,</span><br><span class="line">        <span class="string">"heading"</span>: <span class="string">"打招呼"</span>,</span><br><span class="line">        <span class="string">"content"</span>: <span class="string">"hello"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    `)</span><br><span class="line">    response.<span class="keyword">end</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>前端代码：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">myButton.addEventListener(<span class="string">'click'</span>, <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(<span class="string">'get'</span>, <span class="string">'/xxx'</span>) <span class="comment">// 配置request</span></span><br><span class="line">  request.send()</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'请求响应都完毕了'</span>)</span><br><span class="line">      <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'请求成功'</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(request.responseText)</span><br><span class="line">        <span class="keyword">let</span> <span class="built_in">string</span> = request.responseText</span><br><span class="line">        <span class="comment">// 把符合 JSON 语法的字符串</span></span><br><span class="line">        <span class="comment">// 转换成 JS 对应的值</span></span><br><span class="line">        <span class="keyword">let</span> object = <span class="built_in">window</span>.JSON.parse(<span class="built_in">string</span>)   <span class="comment">//JSON.parse()浏览器提供   </span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> object)</span><br><span class="line">        <span class="built_in">console</span>.log(object)</span><br><span class="line">        <span class="built_in">console</span>.log(object.note)</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'请求失败'</span>) </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><hr><h2 id="同源策略和CORS跨域"><a href="#同源策略和CORS跨域" class="headerlink" title="同源策略和CORS跨域"></a>同源策略和CORS跨域</h2><p>同源策略的本质是：一个域名的JS，在未经允许的情况下，不能读取另一个域名的内容，但你可以向另一个域名发送请求。</p><ol><li>只有 协议+端口+域名 一模一样才允许发 AJAX 请求</li><li>CORS 可以告诉浏览器，我俩一家的，别阻止他</li><li>突破同源策略 === 跨域</li></ol><p>后端代码：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加入响应头</span></span><br><span class="line"><span class="selector-tag">response</span><span class="selector-class">.setHeader</span>(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'http://allen.com:8001'</span>)   <span class="comment">//允许http://allen.com:8001向我发起请求</span></span><br><span class="line"><span class="selector-tag">response</span><span class="selector-class">.setHeader</span>(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)   <span class="comment">//允许所有域名向我发起请求</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JSONP是什么？</title>
      <link href="/2018/10/06/JSONP/"/>
      <url>/2018/10/06/JSONP/</url>
      <content type="html"><![CDATA[<h2 id="以前是如何发送请求的？"><a href="#以前是如何发送请求的？" class="headerlink" title="以前是如何发送请求的？"></a>以前是如何发送请求的？</h2><p>有一些HTML标签能发送请求，比如<code>&lt;form&gt;</code>标签、<code>&lt;a&gt;</code>标签、<code>&lt;link&gt;</code>标签、<code>&lt;script&gt;</code>标签、<code>&lt;img&gt;</code>标签。</p><p>我们引入一个例子来说明：<br><img src="/2018/10/06/JSONP/example.png" alt="例子"><br>用户每点击一下付款按钮，页面和数据库中的余额减少1。</p><h3 id="使用form表单"><a href="#使用form表单" class="headerlink" title="使用form表单"></a>使用form表单</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>你的账户余额为<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"amount"</span>&gt;</span>&amp;&amp;&amp;amount&amp;&amp;&amp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/pay"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"付款1块钱"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>form表单一旦提交就会自动刷新页面，进入pay页面，需要用户退回index页面，刷新页面才能看到结果。<br>而a标签也会刷新页面或打开新页面。<br>这样的用户体验很差，程序员就想办法怎么样才能发送请求并局部刷新页面。</p><a id="more"></a><h3 id="使用form-iframe"><a href="#使用form-iframe" class="headerlink" title="使用form + iframe"></a>使用form + iframe</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>你的账户余额为<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"amount"</span>&gt;</span>&amp;&amp;&amp;amount&amp;&amp;&amp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/pay"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">target</span>=<span class="string">"result"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"付款1块钱"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"about:blank"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">name</span>=<span class="string">"result"</span> <span class="attr">height</span>=<span class="string">"200"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方法发送请求后不会自动跳转页面，但余额部分不会局部刷新，这也是过时的方法了。</p><h3 id="动态创建图片"><a href="#动态创建图片" class="headerlink" title="动态创建图片"></a>动态创建图片</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>你的账户余额为<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"amount"</span>&gt;</span>&amp;&amp;&amp;amount&amp;&amp;&amp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>付款1块钱<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        button.addEventListener(<span class="string">'click'</span>, (e) =&gt;&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> image = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span></span><br><span class="line"><span class="actionscript">            image.src = <span class="string">'/pay'</span></span></span><br><span class="line"><span class="actionscript">            image.onload = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'打钱成功'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.location.reload() <span class="comment">//刷新页面</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="actionscript">            image.onerror = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'打钱失败'</span>)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样子发送请求虽然能成功(浏览器控制台中返回了200状态码)，但实际上仍显示打钱失败，这是为什么呢？<br>因为后端代码中返回的不是真正的图片，被浏览器识别出来，导致<code>image.onerror</code>执行，如果使用的是真图片就会执行<code>image.onload</code>。所以后端必须返回一个图片。</p><ul><li>另外img标签还有一个弊端是只能发起GET请求不是发起POST请求。</li></ul><h3 id="动态创建script"><a href="#动态创建script" class="headerlink" title="动态创建script"></a>动态创建script</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>你的账户余额为<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"amount"</span>&gt;</span>&amp;&amp;&amp;amount&amp;&amp;&amp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"button"</span>&gt;</span>付款1块钱<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        button.addEventListener(<span class="string">'click'</span>, (e) =&gt;&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span></span><br><span class="line"><span class="actionscript">            script.src = <span class="string">'/pay'</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.appendChild(script)</span></span><br><span class="line"><span class="actionscript">            script.onload = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'success'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.location.reload() <span class="comment">//刷新页面</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="actionscript">            script.onerror = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'fail'</span>)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>动态创建img不用放入页面就能发起请求，而script必须要放入页面才能发起请求</p></li><li><p>因为这种方法会在页面中放入一个script，那么里面的内容就会执行，所以我们可以不用监听script.onload，直接在后端返回的script中写入我们要执行的代码。<br><strong>node.js:</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.write(`alert(<span class="string">'success'</span>)</span><br><span class="line">                window<span class="selector-class">.location</span><span class="selector-class">.reload</span>()`)</span><br></pre></td></tr></table></figure></li><li><p>页面中会插入script，那么在请求成功后应该删除script （SRJ）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script<span class="selector-class">.onload</span> = function(e)&#123;</span><br><span class="line">  e<span class="selector-class">.currentTarget</span><span class="selector-class">.remove</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>script实际上依然存在于内存，只是在页面中消失了</p></li></ol><hr><p>原生JS：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">button.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  <span class="keyword">let</span> functionName = <span class="string">'allen'</span>+<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">100000</span>,<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">window</span>[functionName] = <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(result === <span class="string">'success'</span>)&#123;</span><br><span class="line">      amount.innerText = amount.innerText - <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">`fail`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  script.src = <span class="string">'http://jack.com:8002/pay?callback='</span> + functionName;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">  script.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.currentTarget.remove();</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">window</span>[functionName]</span><br><span class="line">  &#125;;</span><br><span class="line">  script.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'fail'</span>);</span><br><span class="line">    e.currentTarget.remove();</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">window</span>[functionName]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><ul><li><strong>这种方法可以跨域请求。</strong><br>比如能在xxx.com中请求zzz.com的JS，但因为script请求只能GET，很不安全，隐私相关的重要操作还是需要使用POST请求。</li></ul><hr><h4 id="附server代码："><a href="#附server代码：" class="headerlink" title="附server代码："></a>附server代码：</h4><p><a href="https://github.com/yuyuye958/git-nodejs/blob/master/server.js" target="_blank" rel="noopener">https://github.com/yuyuye958/git-nodejs/blob/master/server.js</a></p><hr><h2 id="所以JSONP到底是什么？"><a href="#所以JSONP到底是什么？" class="headerlink" title="所以JSONP到底是什么？"></a>所以JSONP到底是什么？</h2><p>请求方：allen.com的前端程序员（浏览器）<br>响应方：frank.com的后端程序员（服务器）</p><ol><li>请求方创建script，src指向响应方，同时传一个查询参数 ?callbackName=xxx</li><li>响应方根据查询参数callbackName，构造形如<br> i. xxx.call(undefined, ‘你要的数据’)<br>ii. xxx(‘你要的数据’)<br>这样的响应</li><li>浏览器接收到响应，就会执行xxx.call(undefined, ‘你要的数据’)</li><li>那么请求方就知道了他要的数据<br>这就是JSONP</li></ol><p>约定：</p><ol><li>callbackName -&gt; callback / jQuery_callback</li><li>xxx -&gt; 随机数 如allen16516541644464()</li><li>jQuery 用法<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url: "http://jack.com:8002/pay",</span><br><span class="line">dataType: "jsonp",</span><br><span class="line"><span class="keyword">success: </span>function( response ) &#123;</span><br><span class="line">        if(response === 'success') &#123;</span><br><span class="line">        amount.innerText = amount.innerText - 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ul><li>注意JSONP不是ajax</li></ul><h3 id="JSONP-为什么不支持-POST"><a href="#JSONP-为什么不支持-POST" class="headerlink" title="JSONP 为什么不支持 POST"></a>JSONP 为什么不支持 POST</h3><ol><li>因为 JSONP 是通过动态创建 script 实现的</li><li>创建 script 只能发送 get 请求</li></ol>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模仿jQuery实现一个API</title>
      <link href="/2018/09/29/jQuery/"/>
      <url>/2018/09/29/jQuery/</url>
      <content type="html"><![CDATA[<h2 id="如何模仿jQuery实现一个API？"><a href="#如何模仿jQuery实现一个API？" class="headerlink" title="如何模仿jQuery实现一个API？"></a>如何模仿jQuery实现一个API？</h2><p>jQuery是一个 JavaScript 库，核心理念是 - write less, do more。<br>其实jQuery就是一个函数，里面封装了很多方法，我们通过这些方法来获取节点(元素)并进行操作，大大方便了我们的编程。</p><ul><li>那么关于下面的代码，如何实现类似jQuery提供的api呢？<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">window</span>.jQuery = ???</span><br><span class="line"><span class="keyword">window</span>.$ = jQuery</span><br><span class="line"></span><br><span class="line">var $div = $(<span class="string">'div'</span>)</span><br><span class="line">$div.addClass([<span class="string">'red'</span>,<span class="string">'blue'</span>]) <span class="comment">// 可将所有 div 的 class 添加 red 和 blue  注意这里是数组的写法</span></span><br><span class="line">$div.setText(<span class="string">'hi'</span>) <span class="comment">// 可将所有 div 的 textContent 变为 hi</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ol><li><p>首先获取对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> nodes = &#123;&#125;  <span class="comment">//初始化对象</span></span><br><span class="line">    <span class="comment">//判断用户想获取一个还是多个节点</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> nodeOrSelector === <span class="string">'string'</span>)&#123;     <span class="comment">//多个节点</span></span><br><span class="line">        <span class="keyword">let</span> temp = <span class="built_in">document</span>.querySelectorAll(nodeOrSelector)   <span class="comment">// 伪数组</span></span><br><span class="line">        <span class="comment">//遍历临时对象temp，将它的值放入nodes内，得到一个纯净的伪数组，原型链指向Object</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;temp.length;i++)&#123;</span><br><span class="line">            nodes[i] = temp[i]</span><br><span class="line">        &#125;</span><br><span class="line">        nodes.length = temp.length</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nodeOrSelector <span class="keyword">instanceof</span> Node)&#123;   <span class="comment">//一个节点</span></span><br><span class="line">        nodes = &#123;</span><br><span class="line">            <span class="number">0</span>: nodeOrSelector,</span><br><span class="line">            length: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nodes  <span class="comment">//返回nodes</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加addClass方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">classes</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 用户在addClass中输入的是数组所以用forEach</span></span><br><span class="line">    classes.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//遍历nodes，为nodes内每一个元素节点添加class</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i&lt;nodes.length; i++)&#123;</span><br><span class="line">            nodes[i] .classList.add(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加setText方法</p><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nodes.setText = <span class="function"><span class="keyword">function</span><span class="params">(text)</span>&#123;</span></span><br><span class="line">    <span class="comment">//遍历nodes，为nodes内每一个元素节点的textContent添加text</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">let</span> i=<span class="number">0</span>;i&lt;nodes.length;i++)&#123;</span><br><span class="line">        nodes[i].textContent = <span class="built_in">text</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完整代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> nodes = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> nodeOrSelector === <span class="string">'string'</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="built_in">document</span>.querySelectorAll(nodeOrSelector)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;temp.length;i++)&#123;</span><br><span class="line">            nodes[i] = temp[i]</span><br><span class="line">        &#125;</span><br><span class="line">        nodes.length = temp.length</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nodeOrSelector <span class="keyword">instanceof</span> Node)&#123;</span><br><span class="line">        nodes = &#123;</span><br><span class="line">            <span class="number">0</span>: nodeOrSelector,</span><br><span class="line">            length: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">classes</span>)</span>&#123;</span><br><span class="line">        classes.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span> ; i&lt;nodes.length; i++)&#123;</span><br><span class="line">                nodes[i] .classList.add(value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nodes.setText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nodes.length;i++)&#123;</span><br><span class="line">            nodes[i].textContent = text</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.$ = jQuery</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $div = $(<span class="string">'div'</span>)</span><br><span class="line">$div.addClass([<span class="string">'red'</span>,<span class="string">'blue'</span>]) <span class="comment">// 可将所有 div 的 class 添加 red 和 blue</span></span><br><span class="line">$div.setText(<span class="string">'hi'</span>) <span class="comment">// 可将所有 div 的 textContent 变为 hi</span></span><br></pre></td></tr></table></figure></li></ol><p>完成，另外以上代码还使用到了JS的闭包。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS中的函数</title>
      <link href="/2018/09/27/JS%E5%87%BD%E6%95%B0/"/>
      <url>/2018/09/27/JS%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h2><p>函数是一段可以反复调用的代码块。函数还能接受输入的参数，不同的参数会返回不同的值。<br>函数的本质就是对象，或者说可以执行代码的对象就是函数。</p><h2 id="函数的五种声明方法"><a href="#函数的五种声明方法" class="headerlink" title="函数的五种声明方法"></a>函数的五种声明方法</h2><p>函数体内部的return语句，表示返回。JavaScript 引擎遇到return语句，就直接返回return后面的那个表达式的值，后面即使还有语句，也不会得到执行。也就是说，return语句所带的那个表达式，就是函数的返回值。如果没有return，该函数就返回undefined。</p><ul><li>具名函数<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">undefined</span>; <span class="comment">// 如果不写return ，浏览器默认返回undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p>匿名函数</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>结合上面两种方式(谨慎使用)</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn3 = <span class="function"><span class="keyword">function</span> <span class="title">fn4</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Function函数对象<br>new Function() 中，最后一个参数表示函数体，前面的参数表示传入函数的参数。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn5 = <span class="keyword">new</span> <span class="function"><span class="keyword">Function</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="string">'x'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="string">'y'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="string">'return x + y'</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span>;</span></span><br></pre></td></tr></table></figure></li><li><p>箭头函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn6 = <span class="function">(<span class="params">x,y</span>) =&gt;</span> &#123;<span class="keyword">return</span> x+y&#125;  <span class="comment">// 箭头前面表示传入函数的参数，箭头后面表示函数体。</span></span><br><span class="line"><span class="keyword">var</span> fn7 = <span class="function"><span class="params">x</span> =&gt;</span> &#123;<span class="keyword">return</span> x*<span class="number">2</span>&#125;  <span class="comment">// 如果只有一个参数，参数的圆括号可以省略</span></span><br><span class="line"><span class="keyword">var</span> fn8 = <span class="function"><span class="params">x</span> =&gt;</span> x*x  <span class="comment">// 如果函数体只有一句话，可以同时省略函数体的大括号及return</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="literal">undefined</span>; &#125;</span><br><span class="line">fn()  <span class="comment">// 执行该函数。</span></span><br></pre></td></tr></table></figure><p>作为初学者，更建议使用call()方法，call()的第一个参数是this，后面的参数是arguments(伪数组)<br>例如：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">(x,y)</span></span>&#123; <span class="keyword">return</span> x+y; &#125;</span><br><span class="line">fn.call(<span class="literal">undefined</span>,<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 结果为3 等价于fn(1,2)</span></span><br></pre></td></tr></table></figure></p><h2 id="函数的常用属性和方法"><a href="#函数的常用属性和方法" class="headerlink" title="函数的常用属性和方法"></a>函数的常用属性和方法</h2><ul><li><p>name 属性<br>每一个函数都有name属性，但其值可能因不同的函数声明方式而不同。举例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具名函数的name属性，表示函数的名字</span></span><br><span class="line">function fn1() &#123;&#125; </span><br><span class="line">fn1<span class="selector-class">.name</span> <span class="comment">// "fn1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数的name属性，指的是接收函数的变量名</span></span><br><span class="line"><span class="selector-tag">var</span> fn2 = function () &#123;&#125; </span><br><span class="line">fn2<span class="selector-class">.name</span> <span class="comment">// "fn2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fn3.name返回函数表达式的名字。真正的函数名还是fn3，而fn4这个名字只在函数体内部可用。</span></span><br><span class="line"><span class="selector-tag">var</span> fn3 = function fn4()&#123;&#125; </span><br><span class="line">fn3<span class="selector-class">.name</span> <span class="comment">// "fn4"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Function()方法构造函数，函数的name属性值为"anonymous"</span></span><br><span class="line"><span class="selector-tag">var</span> fn5 = new Function()</span><br><span class="line">fn5<span class="selector-class">.name</span> <span class="comment">// "anonymous"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数的name属性，指的也是接收函数的变量名</span></span><br><span class="line"><span class="selector-tag">var</span> fn6 = () =&gt; &#123;&#125;</span><br><span class="line">fn6<span class="selector-class">.name</span> <span class="comment">// "fn6"</span></span><br></pre></td></tr></table></figure></li><li><p>length 属性<br>函数的length属性返回函数预期传入的参数个数，即函数定义之中的参数个数。<br>常用来判断定义时和调用时参数的差异</p><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">(a, b)</span> &#123;&#125;</span></span><br><span class="line">fn.<span class="built_in">length</span> <span class="comment">// 2  不管调用时输入了多少个参数，length属性始终等于2。</span></span><br></pre></td></tr></table></figure></li><li><p>toString() 方法<br>函数的toString方法返回一个字符串，内容是函数的源码，包括函数中的注释也会被打印出来。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="comment">/*  我是</span></span><br><span class="line"><span class="comment">  注释*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.toString()</span><br><span class="line"><span class="comment">//   "function fn() &#123;</span></span><br><span class="line"><span class="comment">//     var a = 1</span></span><br><span class="line"><span class="comment">//   /*  我是</span></span><br><span class="line"><span class="comment">//     注释*/</span></span><br><span class="line"><span class="comment">//   &#125;"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="call-apply-bind-的用法"><a href="#call-apply-bind-的用法" class="headerlink" title="call apply bind 的用法"></a>call apply bind 的用法</h2><p>call() 方法调用一个函数, 其具有一个指定的this值和分别地提供的参数(参数的列表)。<br>apply() 方法调用一个函数, 其具有一个指定的this值，以及作为一个数组（或类似数组的对象）提供的参数。</p><ul><li>apply和call二者作用一样，只是接受参数的方式不一样，call需要把参数按顺序传递进去，而apply则是把参数放在数组里。</li></ul><p>bind() 方法创建一个新的函数，被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。</p><ul><li>bind 是创建对应函数，非立即执行；apply 、call会立即执行函数 。</li></ul><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域（scope）指的是变量存在的范围。<br>在 ES5 的规范中，Javascript 只有两种作用域：<br>一种是全局作用域，变量在整个程序中一直存在，所有地方都可以读取；<br>另一种是函数作用域，变量只在函数内部存在。ES6又新增了块级作用域。</p><ul><li>在判断作用域时，还要注意函数作用域内部会产生<strong>变量提升</strong>现象。<br>var命令声明的变量，不管在什么位置，变量声明都会被提升到函数体的头部。</li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p><strong>如果一个函数使用了它范围外的变量，那么（这个函数和这个变量）就叫做闭包。</strong><br>具体介绍这里引用链接:<br><a href="https://zhuanlan.zhihu.com/p/22486908" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/22486908</a></p><h2 id="回调（callback）"><a href="#回调（callback）" class="headerlink" title="回调（callback）"></a>回调（callback）</h2><p>名词解释：被当做参数的函数就是回调函数<br>动词解释：调用这个回调<br>举例：<br>fn(function(){}) ：函数fn中的参数是一个函数，在fn中调用了这个函数，那么这个函数就是回调函数，调用的过程就是回调。</p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS中的数组</title>
      <link href="/2018/09/26/JS%E6%95%B0%E7%BB%84/"/>
      <url>/2018/09/26/JS%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<h2 id="数组是什么"><a href="#数组是什么" class="headerlink" title="数组是什么"></a>数组是什么</h2><p>数组（array）是按次序排列的一组值。每个值的位置都有编号（从0开始），整个数组用方括号表示。<br>其实本质上，数组属于一种特殊的对象。typeof运算符会返回数组的类型是object。</p><h2 id="数组的length属性"><a href="#数组的length属性" class="headerlink" title="数组的length属性"></a>数组的length属性</h2><p>数组的length属性，返回数组的成员数量。只要是数组，就一定有length属性。</p><h2 id="数组的构造方法"><a href="#数组的构造方法" class="headerlink" title="数组的构造方法"></a>数组的构造方法</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="type">Array</span>(<span class="number">3</span>) ; <span class="comment">// 3表示数组的长度，每一个元素都为undefined</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="keyword">new</span> <span class="type">Array</span>(<span class="number">3</span>,<span class="number">3</span>); <span class="comment">// 得到一个数组[3,3]，是仿自Java中的写法，不常用。</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">3</span>,<span class="number">3</span>] ; <span class="comment">// 得到了一个数组[3,3]，常用</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="in-运算符-amp-amp-for…in-循环"><a href="#in-运算符-amp-amp-for…in-循环" class="headerlink" title="in 运算符 &amp;&amp; for…in 循环"></a>in 运算符 &amp;&amp; for…in 循环</h2><p>for in循环不仅可以遍历对象，也可以遍历数组，因为数组是一种特殊对象。</p><ul><li><strong>使用时需要注意，for…in不仅会遍历数组所有的数字键，还会遍历非数字键。</strong></li></ul><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.foo = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> a) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// foo</span></span><br></pre></td></tr></table></figure></p><h2 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h2><p>常用for循环，while循环<br>或forEach遍历<strong>(不支持break 和 continue ，不返回值)</strong>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while循环</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; a.length) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a[i]);</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach遍历</span></span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,key</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key+<span class="string">':'</span>+value);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 0:a</span></span><br><span class="line"><span class="comment">// 1:b</span></span><br><span class="line"><span class="comment">// 2:c</span></span><br><span class="line"><span class="comment">// 3:d</span></span><br></pre></td></tr></table></figure></p><h2 id="什么是伪数组"><a href="#什么是伪数组" class="headerlink" title="什么是伪数组"></a>什么是伪数组</h2><p>如果一个对象的所有键名都是正整数或零，并且有length属性，那么这个对象就很像数组，但实际并不是数组。</p><ul><li><strong>伪数组的原型链中没有Array.prototype</strong></li></ul><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数组.__proto__ === <span class="type">Array</span>.pro<span class="keyword">type</span></span><br><span class="line">伪数组对象.__proto__ === <span class="type">Object</span>.proto<span class="keyword">type</span></span><br></pre></td></tr></table></figure><h2 id="数组的一些API"><a href="#数组的一些API" class="headerlink" title="数组的一些API"></a>数组的一些API</h2><h3 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort() 排序"></a>sort() 排序</h3><p>该方法是JS封装的一个重排序方法，使用的算法是<strong>快速排序</strong>。不传参时默认为升序排列。<br><strong>注：sort()方法返回的是原数组，即使用该方法会改变原来的数组序列。</strong><br>=&gt;arr.sort(function(a,b){return a-b}) 升序<br>=&gt;arr.sort(function(a,b){return b-a}) 降序</p><h3 id="join-分隔"><a href="#join-分隔" class="headerlink" title="join() 分隔"></a>join() 分隔</h3><p>该方法返回的是字符串，参数表示用什么分隔数组的每一项，不传参默认逗号分隔，参数为空数组时，数组每一项之间没有间隔。<br>代码示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span> = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];</span><br><span class="line"><span class="built_in">array</span>.join(<span class="string">'-'</span>);</span><br><span class="line"><span class="comment">// "a-b-c-d"</span></span><br></pre></td></tr></table></figure></p><h3 id="concat-连接"><a href="#concat-连接" class="headerlink" title="concat() 连接"></a>concat() 连接</h3><p>该方法返回的是新数组，原数组不会被改变。<br>示例：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">a.concat(b);</span><br><span class="line"><span class="comment">// 新数组 [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></p><p>使用concat()方法还可以用于复制数组<br>例如：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">new</span><span class="type">Arr</span> = arr.concat([]);</span><br><span class="line"><span class="comment">// newArr 的值为 [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="keyword">new</span><span class="type">Arr</span> === arr; <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 虽然值相同，但这是两个不同的对象，引用的地址不同</span></span><br></pre></td></tr></table></figure></p><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>功能与forEach相同，但map()有返回值。同样不会改变原数组的值，返回一个新数组。<br>示例：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.map(function(value,<span class="type">key</span>)&#123;</span><br><span class="line">    return value * <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></p><h3 id="filter-过滤、筛选"><a href="#filter-过滤、筛选" class="headerlink" title="filter() 过滤、筛选"></a>filter() 过滤、筛选</h3><p>用法与map()一样。<br>示例：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.filter(function(value,<span class="type">key</span>)&#123;</span><br><span class="line">    return value &lt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure></p><h3 id="reduce-可接收一个函数作为累加器"><a href="#reduce-可接收一个函数作为累加器" class="headerlink" title="reduce() 可接收一个函数作为累加器"></a>reduce() 可接收一个函数作为累加器</h3><p>第一个参数传一个函数作为累加器，第二个参数表示初始值。<br>示例：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.reduce(function(previous,current)&#123;</span><br><span class="line">    return previous + current;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// 15</span></span><br></pre></td></tr></table></figure></p><p>可以用reduce()方法来写map()数组每一项×2：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">a.reduce(function(array,n)&#123;</span><br><span class="line">    array.push(n * <span class="number">2</span>);</span><br><span class="line">    return array;</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="comment">// [2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure></p><p>可以用reduce()方法来写filter()筛选偶数：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">a.reduce(function(array,n)&#123;</span><br><span class="line">    if(n % <span class="number">2</span> === <span class="number">0</span>)&#123;</span><br><span class="line">            array.push(n);</span><br><span class="line">        &#125;</span><br><span class="line">    return array;</span><br><span class="line">&#125;,[])</span><br><span class="line"><span class="comment">// [2, 4]</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原型与原型链</title>
      <link href="/2018/09/24/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2018/09/24/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      <content type="html"><![CDATA[<h2 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h2><ol><li><strong>Number</strong><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> n2 = <span class="keyword">new</span> <span class="type">Number</span>(<span class="number">1</span>)  <span class="comment">// 创建一个 Number 对象</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>两者的区别是什么？<br>前者将数据直接存在 Stack 里，后者实际上是一个哈希对象，把 Heap 地址存在 Stack 里。</p></li><li><p>但是前者没有toString()属性，为什么<code>n1.toString()</code>的结果是<code>&#39;1&#39;</code>？<br>JS引擎会建立一个临时的对象，</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="function"><span class="keyword">new</span> <span class="title">Number</span>(n1)</span></span><br><span class="line"><span class="function"><span class="title">temp</span>.<span class="title">toString</span>()</span></span><br></pre></td></tr></table></figure><p>  然后再把temp回收掉，所以几乎没人用第二种写法。</p></li></ul><a id="more"></a><ol start="2"><li><p><strong>String</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello'</span>)  <span class="comment">// 创建一个 String 对象</span></span><br></pre></td></tr></table></figure><p> 和Number同理。</p></li><li><p><strong>Boolean</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b1 = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> b2 = <span class="keyword">new</span> <span class="type">Boolean</span>(<span class="literal">true</span>)  <span class="comment">// 创建一个 Boolean 对象</span></span><br></pre></td></tr></table></figure><p> 和Number同理。</p></li><li><p><strong>Object</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br></pre></td></tr></table></figure><p> o1 和 o2 没区别，不过<code>ol === o2  // false</code>，这是两个对象</p></li></ol><hr><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h3 id="函数的原型对象"><a href="#函数的原型对象" class="headerlink" title="函数的原型对象"></a>函数的原型对象</h3><ul><li>在JavaScript中，我们创建一个函数A(就是声明一个函数), 那么浏览器就会在内存中创建一个对象B，而且每个函数都默认会有一个属性 <strong>prototype</strong> 指向这个对象( 即：prototype的属性的值是这个对象 )。</li><li>这个对象B就是函数A的<strong>原型对象</strong>，简称函数的原型。</li><li>这个原型对象B 默认会有一个属性 constructor 指向了这个函数A ( 意思就是说：constructor属性的值是函数A )。</li></ul><h3 id="使用构造函数创建对象"><a href="#使用构造函数创建对象" class="headerlink" title="使用构造函数创建对象"></a>使用构造函数创建对象</h3><p> 当把一个函数作为构造函数 (理论上任何函数都可以作为构造函数) 使用new创建对象的时候，那么这个对象就会存在一个默认的不可见的属性，来指向构造函数的原型对象。<br> 这个隐藏的属性在浏览器中用<strong>&#95;&#95;proto&#95;&#95;</strong>来表示。</p><p>举例：<br><img src="/2018/09/24/原型与原型链/1.jpg" alt="例子1"></p><p><img src="/2018/09/24/原型与原型链/3.jpg" alt="例子2"></p><hr><h3 id="95-95-proto-95-95-和-prototype-的区别"><a href="#95-95-proto-95-95-和-prototype-的区别" class="headerlink" title="&#95;&#95;proto&#95;&#95; 和 prototype 的区别"></a>&#95;&#95;proto&#95;&#95; 和 prototype 的区别</h3><ol><li>&#95;&#95;proto&#95;&#95; 和 prototype 只是两个 key 而已</li><li>我们一般研究对象的 &#95;&#95;proto&#95;&#95; 和函数的 prototype</li><li><code>对象.__proto__ === 某函数.prototype  // true</code></li><li>如果把函数看成对象，那么<code>函数.__proto__ === Function.prototype</code></li><li>如果把 Function 看成对象，那么 <code>Function.__proto__ === Function.prototype</code></li></ol><hr><h3 id="重要公式"><a href="#重要公式" class="headerlink" title="重要公式"></a>重要公式</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var 对象 = new 函数()</span><br><span class="line">对象.__proto__ === 对象的构造函数.prototype</span><br><span class="line"></span><br><span class="line">// 推论</span><br><span class="line">var <span class="keyword">number</span> = new <span class="keyword">Number</span>()</span><br><span class="line"><span class="keyword">number</span>.__proto__ = <span class="keyword">Number</span>.prototype</span><br><span class="line"><span class="keyword">Number</span>.__proto__ = <span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span></span> // 因为 <span class="keyword">Number</span> 是 <span class="function"><span class="keyword">Function</span></span> 的实例</span><br><span class="line"></span><br><span class="line">var object = new Object()</span><br><span class="line">object.__proto__ = Object.prototype</span><br><span class="line">Object.__proto__ = <span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span></span> // 因为 Object 是 <span class="function"><span class="keyword">Function</span></span> 的实例</span><br><span class="line"></span><br><span class="line">var <span class="function"><span class="keyword">function</span></span> = new <span class="function"><span class="keyword">Function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">function</span>.<span class="title">__proto__</span></span> = <span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span></span></span><br><span class="line"><span class="function"><span class="keyword">Function</span>.<span class="title">__proto__</span></span> == <span class="function"><span class="keyword">Function</span>.<span class="title">prototye</span></span> // 因为 <span class="function"><span class="keyword">Function</span></span> 是 <span class="function"><span class="keyword">Function</span></span> 的实例！</span><br></pre></td></tr></table></figure><hr><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>通过&#95;&#95;proto&#95;&#95;形成原型链而非protrotype<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> fn();</span><br></pre></td></tr></table></figure></p><p><img src="/2018/09/24/原型与原型链/2.png" alt="原型链"></p><p>把这个由&#95;&#95;proto&#95;&#95;串起来的直到Object.prototype.&#95;&#95;proto&#95;&#95;为null的链叫做原型链。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>查找属性，如果本身没有，则会去&#95;&#95;proto&#95;&#95;中查找，也就是构造函数的原型中查找，如果构造函数中也没有该属性，因为构造函数也是对象，也有&#95;&#95;proto&#95;&#95;，那么会去它的原型中查找，一直到null，如果没有则返回undefined</li></ul><p>一图流：<br><img src="/2018/09/24/原型与原型链/总结.jpg" alt="总结"></p><hr><p>一些参考的博客：<br><a href="https://blog.csdn.net/u012468376/article/details/53121081" target="_blank" rel="noopener">https://blog.csdn.net/u012468376/article/details/53121081</a><br><a href="https://blog.csdn.net/yucihent/article/details/79424506" target="_blank" rel="noopener">https://blog.csdn.net/yucihent/article/details/79424506</a></p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS类型转换和内存机制</title>
      <link href="/2018/09/22/JS%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%92%8C%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/09/22/JS%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%92%8C%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h3 id="任意类型转字符串"><a href="#任意类型转字符串" class="headerlink" title="任意类型转字符串"></a>任意类型转字符串</h3><ol><li><p><code>String(x)</code><br><img src="/2018/09/22/JS类型转换和内存机制/1.jpg" alt="转字符串方法一"></p></li><li><p><code>x.toString()</code><br><img src="/2018/09/22/JS类型转换和内存机制/2.jpg" alt="转字符串方法二"></p></li><li><p><code>x + &#39;&#39;</code> 加上空字符串<br><img src="/2018/09/22/JS类型转换和内存机制/3.jpg" alt="转字符串方法三"></p></li></ol><a id="more"></a><hr><h3 id="任意类型转数字"><a href="#任意类型转数字" class="headerlink" title="任意类型转数字"></a>任意类型转数字</h3><ol><li><p><code>Number(x)</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">Number</span><span class="params">(<span class="string">'1'</span>)</span></span>   <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>parseInt(x, 10)</code> 后面的数字表示几进制</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">parseInt</span><span class="params">(<span class="string">'1'</span>,<span class="number">10</span>)</span></span>   <span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="title">parseInt</span><span class="params">(<span class="string">'011'</span>)</span></span>   <span class="comment">// 11</span></span><br><span class="line"><span class="function"><span class="title">parseInt</span><span class="params">(<span class="string">'011'</span>,<span class="number">8</span>)</span></span>   <span class="comment">// 9</span></span><br><span class="line"><span class="function"><span class="title">parseInt</span><span class="params">(<span class="string">'s'</span>)</span></span>   <span class="comment">// NaN</span></span><br><span class="line"><span class="function"><span class="title">parseInt</span><span class="params">(<span class="string">'1s'</span>)</span></span>   <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>parseFloat(x)</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">parseFloat</span><span class="params">(<span class="string">'1.23'</span>)</span></span>   <span class="comment">// 1.23</span></span><br></pre></td></tr></table></figure></li><li><p><code>x - 0</code></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'<span class="number">1</span>' - <span class="number">0</span>   <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>+ x</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ '1'  <span class="comment">// 1</span></span><br><span class="line">+ '-1'  <span class="comment">// -1    加号表示取它原本的值</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="任意类型转布尔"><a href="#任意类型转布尔" class="headerlink" title="任意类型转布尔"></a>任意类型转布尔</h3><ol><li><p>Boolean(x)</p></li><li><p>!!x</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!! <span class="number">0</span>   false   </span><br><span class="line">!! <span class="number">1</span>   true</span><br></pre></td></tr></table></figure></li></ol><ul><li>五个falsy值：<br><code>0</code>,  <code>NaN</code>,  <code>空字符串</code>,  <code>Null</code>,  <code>undefined</code></li><li>所有的对象都是true</li></ul><hr><h2 id="内存机制"><a href="#内存机制" class="headerlink" title="内存机制"></a>内存机制</h2><p>Chrome 给每个网页分配一定数量的内存<br>这些内存要分给页面渲染器、网络模块、浏览器外壳和 JS 引擎（V8引擎）<br>JS 引擎将内存分为代码区和数据区<br>我们只研究数据区<br>数据区分为 <strong>Stack（栈内存）</strong> 和 <strong>Heap（堆内存）</strong></p><ul><li>简单类型的数据直接存在 Stack 里</li><li>复杂类型的数据是把 Heap 地址存在 Stack 里</li></ul><p>遇到问题就画图分析。</p><p><img src="/2018/09/22/JS类型转换和内存机制/4.jpg" alt="内存图"></p><p><img src="/2018/09/22/JS类型转换和内存机制/5.jpg" alt="问题"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">请问 a 显示是几？</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>: <span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b = &#123;<span class="attr">name</span>: <span class="string">'b'</span>&#125;</span><br><span class="line">请问现在 a.name 是多少？</span><br><span class="line"><span class="string">'a'</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>: <span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b.name = <span class="string">'b'</span></span><br><span class="line">请问现在 a.name 是多少？</span><br><span class="line"><span class="string">'b'</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>: <span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b = <span class="literal">null</span></span><br><span class="line">请问现在 a 是什么？</span><br><span class="line">&#123;<span class="attr">name</span>: <span class="string">'a'</span>&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><ul><li>如果一个对象没有被引用，它就是垃圾，将被回收。</li><li>垃圾回收和数据结构有关系，即判断一个树的根有没有被引用</li><li>IE6有bug：关闭页面不会垃圾回收，除非关掉整个浏览器<br>解决方法: <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.div.onclick = <span class="literal">null</span>   <span class="comment">// 把每个监听事件都null掉，否则会造成内存泄漏</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="深复制和浅复制"><a href="#深复制和浅复制" class="headerlink" title="深复制和浅复制"></a>深复制和浅复制</h2><p>也可称为深拷贝和浅拷贝</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = <span class="number">1</span></span><br><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">b</span> = a</span><br><span class="line"><span class="selector-tag">b</span> = <span class="number">2</span> <span class="comment">//这个时候改变 b</span></span><br><span class="line"><span class="selector-tag">a</span> 完全不受 <span class="selector-tag">b</span> 的影响</span><br><span class="line">那么我们就说这是一个深复制</span><br></pre></td></tr></table></figure><p><strong>对于简单类型的数据来说，赋值就是深拷贝。<br>对于复杂类型的数据（对象）来说，才要区分浅拷贝和深拷贝。</strong></p><p>这是一个浅拷贝的例子<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="comment">&#123;name: 'Allen'&#125;</span></span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b.<span class="keyword">name</span> = <span class="string">'b'</span></span><br><span class="line">a.<span class="keyword">name</span> === <span class="string">'b'</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>因为我们对 b 操作后，a 也变了</p><p>什么是深拷贝？就是对 Heap 内存进行完全的拷贝。<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="comment">&#123;name: 'Allen'&#125;</span></span><br><span class="line"><span class="keyword">var</span> b = deepClone(a) <span class="comment">// deepClone 还不知道怎么实现</span></span><br><span class="line">b.<span class="keyword">name</span> = <span class="string">'b'</span></span><br><span class="line">a.<span class="keyword">name</span> === <span class="string">'a'</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS里的数据类型</title>
      <link href="/2018/09/21/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/09/21/JS%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>JS一共有7中数据类型，其中分为两类：<strong>基本类型</strong> 和 <strong>引用类型</strong>。</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li><p><strong>基本类型</strong>：<br>  <code>number</code><br>  <code>string</code><br>  <code>boolean</code><br>  <code>undefined</code><br>  <code>null</code><br>  <code>symbol</code></p></li><li><p><strong>引用类型</strong>：<br>  <code>object (array和function都属于object类型)</code></p></li></ul><h3 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h3><p><code>typeof</code>运算符可以返回一个值的数据类型，用来确定一个值到底是什么类型。。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>  <span class="comment">// "number"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'123'</span>  <span class="comment">// "string"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span>  <span class="comment">// "boolean"</span></span><br><span class="line"></span><br><span class="line">通过这个运算符可以发现两个bug</span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Function</span> <span class="comment">//function</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="number-数值"><a href="#number-数值" class="headerlink" title="number 数值"></a>number 数值</h2><p>表示数字类型</p><ul><li>整数和小数：<code>1 1.1 .1</code></li><li>科学记数法：<code>1.23e2</code></li><li><p>二进制：<br><code>var n = ob11   // 3</code></p></li><li><p>八进制：<br><code>var n = 011   // 9</code></p></li><li><p>十六进制：<br><code>var n = 0x11   // 17</code></p></li></ul><h2 id="string-字符串"><a href="#string-字符串" class="headerlink" title="string 字符串"></a>string 字符串</h2><p>表示字符串类型<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var s = <span class="string">'hello'</span></span><br></pre></td></tr></table></figure></p><p>可以使用””表示空字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var s = <span class="string">""</span></span><br><span class="line">// <span class="string">""</span></span><br></pre></td></tr></table></figure></p><p>如何输入多行字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s = <span class="string">'12345 \</span></span><br><span class="line"><span class="string">67890'</span>    </span><br><span class="line">// <span class="string">"12345 67890"</span> 含回车符号</span><br></pre></td></tr></table></figure></p><p>也可以使用+来连接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s = <span class="string">'hello'</span> + </span><br><span class="line"><span class="string">'world!'</span></span><br><span class="line">// <span class="string">"helloworld!"</span> 无回车符号</span><br></pre></td></tr></table></figure></p><p>转义符： \<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s = <span class="string">'123\n456'</span>  // \n换行</span><br><span class="line">// 123</span><br><span class="line">// 456</span><br></pre></td></tr></table></figure></p><p>ES6语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s = `12345</span><br><span class="line">67890`   //length包含回车</span><br><span class="line">s.length //11</span><br></pre></td></tr></table></figure></p><h2 id="boolean-布尔值"><a href="#boolean-布尔值" class="headerlink" title="boolean 布尔值"></a>boolean 布尔值</h2><p>boolean只有两个值：true和false，通常用于条件判断</p><p>下列运算符会返回布尔值：<br>前置逻辑运算符： <code>!</code> (Not)<br>相等运算符：<code>===</code>，<code>!==</code>，<code>==</code>，<code>!=</code><br>比较运算符：<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code></p><p><strong>逻辑判断</strong><br><code>&amp;&amp;</code>与<code>||</code><br><code>&amp;&amp;</code>表示逻辑与，例如 <code>a &amp;&amp; b</code>表示a和b。常用来做逻辑判断<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> <span class="string">&amp;&amp;</span> <span class="literal">true</span>  <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="literal">true</span> <span class="string">&amp;&amp;</span> <span class="literal">false</span>  <span class="string">//</span> <span class="literal">false</span></span><br><span class="line"><span class="literal">false</span> <span class="string">&amp;&amp;</span> <span class="literal">false</span>  <span class="string">//</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p><code>||</code>表示逻辑或，比例<code>a || b</code>表示a或b。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span> <span class="string">||</span> <span class="literal">true</span>  <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="literal">true</span> <span class="string">||</span> <span class="literal">false</span>  <span class="string">//</span> <span class="literal">true</span></span><br><span class="line"><span class="literal">false</span> <span class="string">||</span> <span class="literal">false</span>  <span class="string">//</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h2 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h2><p>null和undefined都表示空值，但是为什么在JS里会有两个表示空的值呢？<br>可以理解为这个JS之父设计的一个bug，具体差异如下：</p><ul><li><p>声明一个变量但没赋值，默认为undefined</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> a</span><br><span class="line"><span class="selector-tag">a</span> <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p>声明一个对象但此时不想赋值，则赋值为null</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = null</span><br><span class="line"><span class="selector-tag">a</span> <span class="comment">// null</span></span><br></pre></td></tr></table></figure></li><li><p>声明一个变量但没想好给什么值，使用undefined</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> <span class="selector-tag">a</span> = undefined</span><br></pre></td></tr></table></figure></li></ul><p>后面两点算是惯例。</p><h2 id="object-对象"><a href="#object-对象" class="headerlink" title="object 对象"></a>object 对象</h2><p>object（对象），是一组key-value（键值对）的集合，也可看作是哈希表，是一种无序的复合数据集合。<br>在命名key时，如果不加引号，则需要遵守命名规则，加上引号可以随意命名。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'Allen'</span>,</span><br><span class="line">  age: <span class="number">23</span>,</span><br><span class="line">  gender: <span class="string">'male'</span>,</span><br><span class="line">&#125;</span><br><span class="line">obj<span class="selector-class">.name</span>  <span class="comment">// 'Allen'</span></span><br><span class="line">obj<span class="selector-class">.age</span>  <span class="comment">// 20</span></span><br><span class="line">obj<span class="selector-class">.gender</span>  <span class="comment">// 'male'</span></span><br></pre></td></tr></table></figure></p><p>读取对象中的属性有两种方式：<br><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="keyword">name</span> <span class="comment">//'Allen'</span></span><br><span class="line">obj[<span class="string">'name'</span>] <span class="comment">//'Allen'</span></span><br><span class="line">这两种方式是正确的，使用方括号运算符时参数必须是字符串，否则</span><br><span class="line">obj[<span class="keyword">name</span>] <span class="comment">//undefined，这里的参数其实是变量name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">name</span> = <span class="string">'age'</span></span><br><span class="line">obj[<span class="keyword">name</span>]  <span class="comment">// 23  所以在访问对象本身的属性时不要使用这种方式，容易造成混乱。</span></span><br></pre></td></tr></table></figure></p><p>当key是数字时：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">'Allen'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="number">23</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">此时再使用obj.<span class="number">1</span>是无法访问到属性的值的</span><br><span class="line">obj.<span class="number">1</span>   <span class="regexp">//</span> 报错</span><br><span class="line">obj[<span class="number">1</span>]   <span class="regexp">//</span> <span class="string">'Allen'</span></span><br><span class="line">obj[<span class="string">'1'</span>]   <span class="regexp">//</span> <span class="string">'Allen'</span></span><br><span class="line">数字<span class="number">1</span>会自动被转换为字符串<span class="string">'1'</span></span><br></pre></td></tr></table></figure></p><p>对象当中还可以添加对象，key也可以是空字符串<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> parent = &#123;</span><br><span class="line">  name: <span class="string">'Chris'</span>,</span><br><span class="line">  age: <span class="number">35</span>,</span><br><span class="line">  gender: <span class="string">'male'</span>,</span><br><span class="line">  <span class="string">''</span>: <span class="string">'我的key是空字符串'</span>,</span><br><span class="line">  child: &#123;</span><br><span class="line">    name: <span class="string">'Alice'</span>,</span><br><span class="line">    age: <span class="string">'5'</span>,</span><br><span class="line">    gender: <span class="string">'female'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">parent<span class="selector-class">.child</span><span class="selector-class">.name</span>   <span class="comment">// 'Alice'</span></span><br><span class="line">parent<span class="selector-class">.child</span><span class="selector-class">.age</span>   <span class="comment">// 5</span></span><br><span class="line">parent<span class="selector-class">.child</span><span class="selector-class">.gender</span>   <span class="comment">// 'female'</span></span><br><span class="line">parent[<span class="string">''</span>]  <span class="comment">// '我的key是空字符串'</span></span><br></pre></td></tr></table></figure></p><hr><h3 id="delete和in"><a href="#delete和in" class="headerlink" title="delete和in"></a>delete和in</h3><p>delete命令用于删除对象的属性，删除成功后返回true。<br>in运算符用于检查对象是否包含某个属性，如果包含就返回true，否则返回false。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'Allen'</span>,</span><br><span class="line">  age: <span class="number">23</span>,</span><br><span class="line">  gender: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line">delete obj<span class="selector-class">.name</span>  <span class="comment">// true</span></span><br><span class="line">obj <span class="comment">//&#123;age: 23, gender: "male"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">'name'</span> <span class="keyword">in</span> obj  <span class="comment">// false</span></span><br><span class="line"><span class="string">'age'</span> <span class="keyword">in</span> obj  <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>但in运算符不能识别哪些属性是对象自身的，哪些是继承的。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> obj = &#123;</span><br><span class="line">  <span class="selector-tag">p</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">'toString'</span> <span class="keyword">in</span> obj <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>上面代码中toString是继承而来而不是自身的。<br>这时，可以使用对象的hasOwnProperty方法判断一下，是否为对象自身的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'toString'</span> <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">'toString'</span>)) <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="for…in-循环"><a href="#for…in-循环" class="headerlink" title="for…in 循环"></a>for…in 循环</h3><p>for…in循环用来遍历一个对象的全部属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'Allen'</span>,</span><br><span class="line">  age: <span class="number">23</span>,</span><br><span class="line">  gender: <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key)   <span class="comment">// name age gender</span></span><br><span class="line">  <span class="built_in">console</span>.log(obj[key])   <span class="comment">// 'Allen' 23 'male'</span></span><br><span class="line">&#125;</span><br><span class="line">打印出的值的排列顺序并不一定，因为对象本身是无序的复合数据集合。</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS的一些技巧和知识</title>
      <link href="/2018/09/14/CSS/"/>
      <url>/2018/09/14/CSS/</url>
      <content type="html"><![CDATA[<h2 id="CCS布局技巧"><a href="#CCS布局技巧" class="headerlink" title="CCS布局技巧"></a>CCS布局技巧</h2><h3 id="1-左右布局"><a href="#1-左右布局" class="headerlink" title="1. 左右布局"></a>1. 左右布局</h3><p>如果有以下html结构，设置左右两栏布局</p><pre><code class="bash">&lt;div class=<span class="string">"parent clearfix"</span>&gt;    &lt;div class=<span class="string">"leftChild"</span>&gt;&lt;/div&gt;    &lt;div class=<span class="string">"rightChild"</span>&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><h4 id="设置浮动"><a href="#设置浮动" class="headerlink" title="设置浮动"></a>设置浮动</h4><p>左右布局常用的方法就是为子元素设置浮动，然后在其父元素上使用clearfix类清除浮动。示例代码如下：<br><a id="more"></a></p><pre><code class="bash">.clearfix::after{    content:<span class="string">""</span>;    display:block;    clear:both;}.leftChild,.rightChild{    <span class="built_in">float</span>:left;}</code></pre><h4 id="设置position绝对定位"><a href="#设置position绝对定位" class="headerlink" title="设置position绝对定位"></a>设置position绝对定位</h4><p>为父元素设置position:relative; 为子元素设置position:absolute 。示例代码如下：</p><pre><code class="bash">.parent{  position:relative;}.leftChild{  position:absolute;  left:0;  top:0;}.rightChild{  position:absolute;  left:50%;  top:0;}</code></pre><h3 id="2-左中右布局"><a href="#2-左中右布局" class="headerlink" title="2. 左中右布局"></a>2. 左中右布局</h3><pre><code>左中右布局主要方法也是浮动或者绝对定位，不过可以分情况选择其一使用甚至结合使用。</code></pre><h3 id="3-水平居中"><a href="#3-水平居中" class="headerlink" title="3. 水平居中"></a>3. 水平居中</h3><h4 id="内联元素（比如文本和链接）"><a href="#内联元素（比如文本和链接）" class="headerlink" title="内联元素（比如文本和链接）"></a>内联元素（比如文本和链接）</h4><p>在块级父容器中让内联元素水平居中，只需设置 text-align: center;</p><h4 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h4><p>让单个块级元素水平居中的方法：先设置块级元素的 width，赋予一个宽度；然后设置块级元素的 margin: 0 auto;</p><h4 id="多个块级元素"><a href="#多个块级元素" class="headerlink" title="多个块级元素"></a>多个块级元素</h4><p>如果要让多个块级元素在同一水平线上居中，那么可以修改它们的 display: inline-block; 或者父级容器的 display: flex;</p><pre><code class="bash">&lt;main class=<span class="string">"inline-block-horizon-center"</span>&gt;    &lt;div&gt;I<span class="string">'m an element&lt;/div&gt;</span><span class="string">    &lt;div&gt;I'</span>m an element&lt;/div&gt;    &lt;div&gt;I<span class="string">'m an element&lt;/div&gt;</span><span class="string">&lt;/main&gt;</span><span class="string">&lt;main class="flex-horizon-center"&gt;</span><span class="string">    &lt;div&gt;I'</span>m an element&lt;/div&gt;    &lt;div&gt;I<span class="string">'m an element&lt;/div&gt;</span><span class="string">    &lt;div&gt;I'</span>m an element&lt;/div&gt;&lt;/main&gt;main div {    max-width: 125px;}.inline-block-horizon-center {    text-align: center;}.inline-block-horizon-center div {    display: inline-block;    vertical-align: middle/top;}.flex-horizon-center {    display: flex;    justify-content: center;}</code></pre><p>如果想让多个块级元素垂直堆栈的水平对齐，依然可以通过设置 margin: 0 auto;</p><pre><code class="bash">main div {    margin: 0 auto;}main div:nth-child(1) {    width: 200px;}main div:nth-child(2) {    width: 400px;}main div:nth-child(3) {    width: 125px;}</code></pre><h3 id="4-垂直居中"><a href="#4-垂直居中" class="headerlink" title="4. 垂直居中"></a>4. 垂直居中</h3><h4 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h4><h5 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h5><ul><li><p>方法1：设置内联元素的块级父容器的 height 和 line-height 值相等</p></li><li><p>方法2：对于单行的内联元素，也可以添加等值的 padding-top 和 padding-bottom 实现垂直居中</p></li></ul><h5 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h5><ul><li><p>方法1：对于多行的内联元素，也可以添加等值的 padding-top 和 padding-bottom 实现垂直居中</p></li><li><p>方法2：使用 flexbox 实现垂直居中，因为对于父级容器为 display: flex 的元素来说，它的每一个子元素都是垂直居中的</p></li></ul><h4 id="块级元素-1"><a href="#块级元素-1" class="headerlink" title="块级元素"></a>块级元素</h4><h5 id="已知高度"><a href="#已知高度" class="headerlink" title="已知高度"></a>已知高度</h5><p>先让元素 绝对定位 到父容器的中心点，然后设置 负向margin，负值的大小为其自身高度的一半 NOTE: 如果父元素设置了padding，则计算 负向margin 时，负值的大小为：其自身高度的一半再加上父元素的内边距</p><pre><code class="bash">main {    position: relative;}main div {    position: absolute;    top: 50%;    height: 100px;    margin-top: -50px;}</code></pre><h5 id="未知高度"><a href="#未知高度" class="headerlink" title="未知高度"></a>未知高度</h5><p>如果我们不知道块级元素的高度，那么就需要先将元素定位到容器的 中心位置，然后使用 transform 的 translate 属性，将元素的中心和父容器的 中心重合，从而实现垂直居中</p><pre><code class="bash">main {    position: relative;}main div {    position: absolute;    top: 50%;    transform: translateY(-50%);}</code></pre><h4 id="使用flexbox"><a href="#使用flexbox" class="headerlink" title="使用flexbox"></a>使用flexbox</h4><p>高度不定则</p><pre><code class="bash">div {    display: flex;    flex-direction: column;    justify-content: center; }</code></pre><p>宽高固定则</p><pre><code class="bash">div {    display: flex;    justify-content: center;     align-items: center;  }</code></pre><ul><li>更多相关可参考: CSS居中指南<br><a href="https://www.w3ctech.com/topic/1515" target="_blank" rel="noopener">https://www.w3ctech.com/topic/1515</a></li></ul><hr><h2 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h2><p>　　position的含义是指定位类型，取值类型可以有：static、relative、absolute、fixed、inherit和sticky。</p><ol><li>position: static</li></ol><p>　　static(没有定位)是position的默认值，元素处于正常的文档流中，会忽略left、top、right、bottom和z-index属性。</p><ol start="2"><li>position: relative</li></ol><p>　　relative(相对定位)是指给元素设置相对于原本位置的定位，元素并不脱离文档流，因此元素原本的位置会被保留，其他的元素位置不会受到影响。</p><ol start="3"><li>position: absolute</li></ol><p>　　absolute(绝对定位)是指给元素设置绝对的定位，相对定位的对象可以分为两种情况：</p><p>　　1) 设置了absolute的元素如果存在有祖先元素设置了position属性为relative或者absolute，则这时元素的定位对象为此已设置position属性的祖先元素。</p><p>　　2) 如果并没有设置了position属性的祖先元素，则此时相对于body进行定位。</p><ol start="4"><li>position: fixed</li></ol><p>　　可以简单说fixed是特殊版的absolute，fixed元素总是相对于浏览器窗体定位的。</p><ol start="5"><li>inherit</li></ol><p>　　继承父元素的position属性，但需要注意的是IE8以及往前的版本都不支持inherit属性。</p><ol start="6"><li>sticky</li></ol><p>　　在屏幕范围（viewport）时该元素的位置并不受到定位影响（设置是top、left等属性无效），当该元素的位置将要移出偏移范围时，定位又会变成fixed，根据设置的left、top等属性成固定位置的效果。</p><ul><li>更多相关可参考网站:<br>  <a href="http://www.cnblogs.com/s1nker/p/4835079.html" target="_blank" rel="noopener">http://www.cnblogs.com/s1nker/p/4835079.html</a></li></ul><hr><h2 id="CSS其他技巧和知识"><a href="#CSS其他技巧和知识" class="headerlink" title="CSS其他技巧和知识"></a>CSS其他技巧和知识</h2><h3 id="引用CSS的四种方式"><a href="#引用CSS的四种方式" class="headerlink" title="引用CSS的四种方式"></a>引用CSS的四种方式</h3><ol><li>内联style属性</li><li>style标签</li><li>引用外部css文件 link标签</li><li>@import url(./style.css);</li></ol><h3 id="清除float导致浮动的方法"><a href="#清除float导致浮动的方法" class="headerlink" title="清除float导致浮动的方法"></a>清除float导致浮动的方法</h3><ul><li>在float元素的父级元素上加上clearfix的class，示例见第一部分左右布局，</li></ul><h3 id="元素的高度是由什么决定的？"><a href="#元素的高度是由什么决定的？" class="headerlink" title="元素的高度是由什么决定的？"></a>元素的高度是由什么决定的？</h3><ul><li>元素的高度，由其内部文档流元素的高度总和决定</li><li>文档流: 文档内元素的流动方向</li><li>尽量不写高度宽度，用padding和line-height解决，否则可能造成bug</li><li>字体较小的时候，可用line-height控制内联元素的高度 </li></ul><h3 id="中文会自动换行而英文不会"><a href="#中文会自动换行而英文不会" class="headerlink" title="中文会自动换行而英文不会"></a>中文会自动换行而英文不会</h3><pre><code class="bash">word-break: <span class="built_in">break</span>-all;  使得一串英文会被打断 分开word-break: <span class="built_in">break</span>-word;  使得不会打断 分开</code></pre><h3 id="用CSS画三角形的方法"><a href="#用CSS画三角形的方法" class="headerlink" title="用CSS画三角形的方法"></a>用CSS画三角形的方法</h3><pre><code class="bash">.triangle{    border: 10px solid transparent;    width: 0px;    border-left-color: <span class="comment">#E6686A;</span>    border-top-width: 0px;}</code></pre><h3 id="伪元素-before和-after"><a href="#伪元素-before和-after" class="headerlink" title="伪元素::before和::after"></a>伪元素::before和::after</h3><p>相当于div</p><p>加上这两行的代码才会显示内容<br>content: “”;<br>display: block;<br>（如果是position:absolute就不用加，因为绝对定位后元素会默认display:block;）</p><h3 id="让导航栏在同一行里均匀分布"><a href="#让导航栏在同一行里均匀分布" class="headerlink" title="让导航栏在同一行里均匀分布"></a>让导航栏在同一行里均匀分布</h3><p>给ul加css</p><pre><code class="bash">ul{  display:flex;    justyfy-content:space-between;}</code></pre><p>去掉li的float:left<br>去掉ul的clearfix</p><h3 id="icon图标素材资源的网站"><a href="#icon图标素材资源的网站" class="headerlink" title="icon图标素材资源的网站"></a>icon图标素材资源的网站</h3><ul><li><a href="http://www.iconfont.cn" target="_blank" rel="noopener">http://www.iconfont.cn</a><br>阿里巴巴的矢量图标管理、交流平台。</li></ul><h3 id="其他CSS相关的补充"><a href="#其他CSS相关的补充" class="headerlink" title="其他CSS相关的补充"></a>其他CSS相关的补充</h3><ol><li>用到display:inline-block  一般要再加vertical-align:top</li><li>背景图铺满整个背景 background-size:cover</li><li>box-sizing: border-box; 告诉浏览器去理解你设置的边框和内边距的值是包含在width内的</li><li>linear-gradient  渐变色</li><li>尽量不写高度宽度  用padding和line-height解决</li></ol>]]></content>
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML的常用标签和一些重要知识点</title>
      <link href="/2018/09/13/HTML-intro/"/>
      <url>/2018/09/13/HTML-intro/</url>
      <content type="html"><![CDATA[<h2 id="HTML标签的一些知识点"><a href="#HTML标签的一些知识点" class="headerlink" title="HTML标签的一些知识点"></a>HTML标签的一些知识点</h2><h3 id="a-标签-超链接"><a href="#a-标签-超链接" class="headerlink" title="a 标签 超链接"></a>a 标签 超链接</h3><blockquote><p>跳转页面<strong><em>（HTTP GET 请求）</em></strong><br>  属性见 MDN：<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a</a></p></blockquote><ul><li>href：指定链接地址</li><li>target：规定“href”属性中指定的网页或文件以何种方式行进跳转或打开，其值包括：_blank、_self、_parent、_top以及iframe的name属性的值</li></ul><a id="more"></a><h4 id="特别的使用方法"><a href="#特别的使用方法" class="headerlink" title="特别的使用方法"></a>特别的使用方法</h4><ol><li><p>锚点</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"#top"</span>&gt;link&lt;/a&gt;</span><br></pre></td></tr></table></figure><pre><code>只有锚点不发送get请求。&quot;#top&quot;即点击回到页面顶部。</code></pre></li><li><p>下载</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"https://qq.com"</span> download&gt;下 载&lt;/a&gt;</span><br></pre></td></tr></table></figure><pre><code>1. 加上“download”属性，可下载文件:下载.html。若不加https:或http:  会变成file协议。2. 那么如果不加download能下载吗？若目标http响应写了Content-type: application/octet-stream浏览器也会以下载的形式接受请求。若Content-type: text/html 则不会。</code></pre></li><li>伪协议 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"javascript:;"</span>&gt;link&lt;/a&gt;  满足需求:点击但不进行任何操作。</span><br><span class="line">&lt;a href=<span class="string">"javascript:alert(1)"</span>&gt;link&lt;/a&gt;   点击运行此JS。</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>查询请求</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"?name=xxx"</span>&gt;link&lt;/a&gt;</span><br></pre></td></tr></table></figure><pre><code>自动把?name=xxx加进地址栏，发起get请求。</code></pre></li><li><p>文件路径</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"xxx.html"</span> download&gt;QQ&lt;/a&gt;</span><br></pre></td></tr></table></figure><pre><code>相对路径，点击可打开同目录下的xxx.html</code></pre></li></ol><hr><h3 id="form-标签-表单"><a href="#form-标签-表单" class="headerlink" title="form 标签 表单"></a>form 标签 表单</h3><blockquote><p>跳转页面<strong><em>（HTTP POST 请求）</em></strong><br>  属性见 MDN：<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"users"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h4><blockquote><p>如果form里没提交按钮就不能提交。</p></blockquote><blockquote><p>向users路径发送post请求。</p></blockquote><blockquote><p>若输入xxx和yyy并提交，发送post请求的第四部分数据为username=xxx&amp;password=yyy<br>若输入的是中文并提交，发送post请求的数据 xxx和yyy 会转义为utf-8字符。</p></blockquote><blockquote><p>name <strong><em>必须</em></strong> 要写，不写的话提交的时候不会带上你的数据。</p></blockquote><hr><h3 id="input-button-输入-按钮"><a href="#input-button-输入-按钮" class="headerlink" title="input / button 输入 / 按钮"></a>input / button 输入 / 按钮</h3><blockquote><p>区别：是否为「空标签」<br>  input 的属性见：<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input</a><br>  button 的属性见：<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button</a></p></blockquote><h4 id="使用注意事项-1"><a href="#使用注意事项-1" class="headerlink" title="使用注意事项"></a>使用注意事项</h4><ol><li><p>如果一个form里只有一个按钮</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;提交&lt;/button&gt; 则浏览器会默认为<span class="built_in">type</span> = <span class="string">"submit"</span>，是一个普通的按钮</span><br><span class="line">&lt;button <span class="built_in">type</span>= <span class="string">"button"</span> &gt;提交&lt;/button&gt; 不会提交，是一个普通的按钮</span><br><span class="line">&lt;input <span class="built_in">type</span>= <span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt; 是一个提交按钮</span><br><span class="line">&lt;input value=<span class="string">"提交"</span>&gt; 不会提交，是一个普通的按钮</span><br></pre></td></tr></table></figure></li><li><p>实现点击文字勾上复选框</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=”checkbox” id=”XXX”&gt;&lt;label <span class="keyword">for</span>=”XXX”&gt;你好&lt;/label&gt;</span><br></pre></td></tr></table></figure><pre><code>点击&quot;你好&quot;，复选框也一起勾选了</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;用户名&lt;input <span class="built_in">type</span>=”text” name=”username”&gt;&lt;/label&gt; </span><br><span class="line">&lt;label&gt;密码&lt;input <span class="built_in">type</span>=”password” name=”password”&gt;&lt;/label&gt; </span><br><span class="line">&lt;label&gt;&lt;input <span class="built_in">type</span>=”checkbox” name=”agree”&gt;同意&lt;/label&gt;</span><br></pre></td></tr></table></figure><pre><code>用label把input包住，也能实现点击文字勾上复选框。</code></pre></li><li><p>name一定要写的一样，才能复选 / 单选，并在发送请求时提交到服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;&lt;input <span class="built_in">type</span>=”checkBox” name=”fruit” value=<span class="string">"yes"</span>&gt;香蕉&lt;/label&gt;</span><br><span class="line">&lt;label&gt;&lt;input <span class="built_in">type</span>=”checkBox” name=”fruit” value=<span class="string">"no"</span>&gt;橘子&lt;/label&gt;  </span><br><span class="line">&lt;label&gt;&lt;input <span class="built_in">type</span>=”radio” name=”YorN” value=<span class="string">"yes"</span>&gt;Yes&lt;/label&gt;</span><br><span class="line">&lt;label&gt;&lt;input <span class="built_in">type</span>=”radio” name=”YorN” value=<span class="string">"no"</span>&gt;No&lt;/label&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="table-标签-表格"><a href="#table-标签-表格" class="headerlink" title="table 标签 表格"></a>table 标签 表格</h3><blockquote><p>用于展示数据<br>  属性见：<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table</a></p></blockquote><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><p>thead：表头（表格标题及头部信息不等）<br>tbody：表中（表格显示的内容部分）<br>tfoot：表尾（表格说明与备注部分）<br>tr：行<br>th：单元格，作为行或列的标题呈现<br>td：单元格，作为内容单元格呈现<br>caption：表格主标题，位于表格之外</p><h4 id="表格常用属性"><a href="#表格常用属性" class="headerlink" title="表格常用属性"></a>表格常用属性</h4><p>width/height：设置宽度/高度<br>border：设置边框<br>align：设置表格对齐方式（left/center/right）<br>cellspacing：设置单元格与单元格之间的间距<br>cellpadding：设置单元格与内容之间的间距<br>bgcolor：设置表格背景颜色<br>background：设置背景图片<br>colspan：跨列 ‘<td colspan="2"></td>’<br>rowspan：跨行 ‘<td rowspan="2"></td>’</p><hr><h2 id="HTML其他常见标签"><a href="#HTML其他常见标签" class="headerlink" title="HTML其他常见标签"></a>HTML其他常见标签</h2><h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><ul><li>标题：h1~h6</li><li>文本：span</li><li>段落：p</li><li>强调：em</li><li>粗体：b</li><li>斜体：i</li><li>删除线：s</li><li>上标：sup</li><li>下标：sub</li></ul><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><ul><li>头部：header</li><li>尾部：footer</li><li>导航：nav</li><li>文章：article</li><li>章节：section</li><li>侧栏：aside</li><li>地址：address</li><li>时间：time</li><li>标记：mark</li><li>布局：div</li><li>引用：blockquote</li><li>文档主要内容：main （块级标签）</li><li>详细信息：details，一般与 summary 标签一起使用，summary 作为details的第一个子标签使用</li></ul><h3 id="格式化标签"><a href="#格式化标签" class="headerlink" title="格式化标签"></a>格式化标签</h3><ul><li>换行：br</li><li>水平分割线：hr</li></ul><h3 id="img-标签-图片"><a href="#img-标签-图片" class="headerlink" title="img 标签 图片"></a>img 标签 图片</h3><ul><li>src：指定图片链接地址（必须）</li><li>width/height：设置宽度/高度</li><li>title：设置图片标题，鼠标悬浮在图片上时显示</li><li>alt：设置提示，当图片加载失败时会显示</li></ul><hr><h2 id="HTML-元素类别"><a href="#HTML-元素类别" class="headerlink" title="HTML 元素类别"></a>HTML 元素类别</h2><ul><li>块级元素（block）</li><li>行内元素（inline）</li><li>行内块元素（inline-block）。</li></ul><h3 id="display：block"><a href="#display：block" class="headerlink" title="display：block"></a>display：block</h3><p>block元素会独占一行，多个block元素会各自新起一行。默认情况下，block元素宽度自动填满其父元素的宽度。block元素可以设置width、height属性。块级元素及时设置了宽度，仍然会独占一行。block元素可以设置margin、padding属性。</p><h3 id="display：inline"><a href="#display：inline" class="headerlink" title="display：inline"></a>display：inline</h3><p>inline元素不会独占一行，多个相邻的行内元素会排在同一行里，直到一行排列不下，才会新换行，其宽度随元素的内容而变化。inline元素设置width、height属性无效。inline元素的margin和padding属性，水平方向的padding-left、padding-right、margin-left、margin-right都产生边距效果，但竖直方向的padidng-top、padding-bottom、margin-top以及margin-bottom不会产生边距效果。</p><h3 id="display：inline-block"><a href="#display：inline-block" class="headerlink" title="display：inline-block"></a>display：inline-block</h3><p>简单来说就是将对象呈现为inline对象，但是对象的内容作为block对象呈现。之后的内联对象会被排列在同一行内。比如我们可以给一个link（a元素）inline-block属性值，使其具有block的宽度高度特性又具有inline的同行特性。</p><hr><h2 id="补充和总结"><a href="#补充和总结" class="headerlink" title="补充和总结"></a>补充和总结</h2><ol><li>a标签的一些特别用法，见上文。</li><li>input和button的一些使用注意，见上文。</li><li>表单提交时，发送请求会带有表单中的数据，name属性必须写，具体见上文form部分。</li><li>Contenteditable属性可使元素内容可编辑。   </li><li>colgroup标签可调整表格各栏的宽度，很方便。</li></ol><hr><blockquote><p>参考博客<br>  <a href="https://blog.csdn.net/hierarch_lee/article/details/54236380" target="_blank" rel="noopener">https://blog.csdn.net/hierarch_lee/article/details/54236380</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP的请求与响应</title>
      <link href="/2018/09/11/HTTP-intro/"/>
      <url>/2018/09/11/HTTP-intro/</url>
      <content type="html"><![CDATA[<h2 id="Server-Client-HTTP"><a href="#Server-Client-HTTP" class="headerlink" title="Server + Client + HTTP"></a>Server + Client + HTTP</h2><pre><code>* 浏览器负责发起请求* 服务器在 80 端口接收请求* 服务器负责返回内容（响应）* 浏览器负责下载响应内容HTTP 的作用就是指导浏览器和服务器如何进行沟通。</code></pre><a id="more"></a><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h3><p>输入以下命令：</p><pre><code class="bash">curl -s -v -H <span class="string">"Allen: xxx"</span> -- <span class="string">"https://www.baidu.com"</span></code></pre><p>请求的内容为：</p><pre><code class="bash">GET / HTTP/1.1Host: www.baidu.comUser-Agent: curl/7.54.0Accept: */*Allen: xxx</code></pre><h3 id="请求的格式"><a href="#请求的格式" class="headerlink" title="请求的格式"></a>请求的格式</h3><pre><code class="bash">1 动词 路径 协议/版本2 Key1: value12 Key2: value22 Key3: value32 Content-Type: application/x-www-form-urlencoded2 Host: www.baidu.com2 User-Agent: curl/7.54.03 4 要上传的数据</code></pre><pre><code>1. 请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）2. 第三部分永远都是一个回车（\n）3. 动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等4. 这里的路径包括「查询参数」，但不包括「锚点」5. 如果你没有写路径，那么路径默认为 /6. 第 2 部分中的 Content-Type 标注了第 4 部分的格式</code></pre><h3 id="如何用-Chrome-查看响应"><a href="#如何用-Chrome-查看响应" class="headerlink" title="如何用 Chrome 查看响应"></a>如何用 Chrome 查看响应</h3><pre><code>1. 打开 Network2. 地址栏输入网址3. 在 Network 点击，查看 request，点击「view source」4. 点击「view source」后可以看到请求的前三部分5. 如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到</code></pre><hr><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h3 id="请求示例-1"><a href="#请求示例-1" class="headerlink" title="请求示例"></a>请求示例</h3><p>对应上面请求的响应如下：</p><pre><code class="bash">HTTP/1.1 200 OKAccept-Ranges: bytesCache-Control: private, no-cache, no-store, proxy-revalidate, no-transformConnection: Keep-AliveContent-Length: 2443Content-Type: text/htmlDate: Tue, 10 Oct 2017 09:14:05 GMTEtag: <span class="string">"5886041d-98b"</span>Last-Modified: Mon, 23 Jan 2017 13:24:45 GMTPragma: no-cacheServer: bfe/1.0.8.18Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt; 后面太长，省略……</code></pre><h3 id="响应的格式"><a href="#响应的格式" class="headerlink" title="响应的格式"></a>响应的格式</h3><pre><code class="bash">1 协议/版本号 状态码 状态解释2 Key1: value12 Key2: value22 Content-Length: 179312 Content-Type: text/html34 要下载的内容</code></pre><pre><code>* 状态码大概记一下，是服务器对浏览器说的话    * 1xx 不常用    * 2xx 表示成功    * 3xx 表示滚吧    * 4xx 表示你丫错了    * 5xx 表示好吧，我错了* 状态解释没什么用* 第 2 部分中的 Content-Type 标注了第 4 部分的格式* 第 2 部分中的 Content-Type 遵循 MIME 规范</code></pre><h3 id="如何用-Chrome-查看响应-1"><a href="#如何用-Chrome-查看响应-1" class="headerlink" title="如何用 Chrome 查看响应"></a>如何用 Chrome 查看响应</h3><pre><code>1. 打开 Network2. 输入网址3. 选中第一个响应4. 查看 Response Headers，点击「view source」5. 点击「view source」后你会看到响应的前两部分6. 查看 Response 或者 Preview，你会看到响应的第 4 部分</code></pre><hr><ul><li>Chrome开发者工具查看 HTTP 请求与响应可详见：<a href="https://www.jianshu.com/p/a08134dbee23" target="_blank" rel="noopener">https://www.jianshu.com/p/a08134dbee23</a></li></ul><hr><h2 id="如何使用-curl-命令？"><a href="#如何使用-curl-命令？" class="headerlink" title="如何使用 curl 命令？"></a>如何使用 curl 命令？</h2><p>在Linux中curl是一个利用URL规则在命令行下工作的文件传输工具，可以说是一款很强大的http命令行工具。它支持文件的上传和下载，是综合传输工具，但按传统，习惯称url为下载工具。</p><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><pre><code class="bash"><span class="comment"># curl [option] [url]</span></code></pre><h3 id="常见参数："><a href="#常见参数：" class="headerlink" title="常见参数："></a>常见参数：</h3><pre><code class="bash">-A/--user-agent &lt;string&gt;              设置用户代理发送给服务器-b/--cookie &lt;name=string/file&gt;    cookie字符串或文件读取位置-c/--cookie-jar &lt;file&gt;                    操作结束后把cookie写入到这个文件中-C/--<span class="built_in">continue</span>-at &lt;offset&gt;            断点续转-D/--dump-header &lt;file&gt;              把header信息写入到该文件中-e/--referer                                  来源网址-f/--fail                                          连接失败时不显示http错误-o/--output                                  把输出写到该文件中-O/--remote-name                      把输出写到该文件中，保留远程文件的文件名-r/--range &lt;range&gt;                      检索来自HTTP/1.1或FTP服务器字节范围-s/--silent                                    静音模式。不输出任何东西-T/--upload-file &lt;file&gt;                  上传文件-u/--user &lt;user[:password]&gt;      设置服务器的用户和密码-w/--write-out [format]                什么输出完成后-x/--proxy &lt;host[:port]&gt;              在给定的端口上使用HTTP代理-<span class="comment">#/--progress-bar                        进度条显示当前的传送状态</span></code></pre><ul><li>curl命令的更多用法可详见：<a href="http://man.linuxde.net/curl" target="_blank" rel="noopener">http://man.linuxde.net/curl</a></li></ul>]]></content>
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建Hexo博客（Next主题）过程中碰到的问题</title>
      <link href="/2018/09/11/Hexo/"/>
      <url>/2018/09/11/Hexo/</url>
      <content type="html"><![CDATA[<p>该主题的github主页：<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> </p><h2 id="侧边菜单修改却无法访问"><a href="#侧边菜单修改却无法访问" class="headerlink" title="侧边菜单修改却无法访问"></a>侧边菜单修改却无法访问</h2><p>在next的_config.yml文件中修改menu配置，添加tag和categories选项，但点击会出现404页面。</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>在根目录执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"tags"</span> </span><br><span class="line">hexo new page <span class="string">"categories"</span></span><br></pre></td></tr></table></figure></p><p>打开它们并相应添加type: “tags”和type: “categories”，保存</p><a id="more"></a><hr><h2 id="安装搜索功能-Local-Search"><a href="#安装搜索功能-Local-Search" class="headerlink" title="安装搜索功能 Local Search"></a>安装搜索功能 Local Search</h2><p>在next的_config.yml文件中修改Local Search的enable: true后，搜索功能仍无效</p><h3 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h3><p>安装 hexo-generator-search和 hexo-generator-searchdb</p><p>在根目录下执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p><p>在根目录的_config.yml文件中添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git入门</title>
      <link href="/2018/09/10/git%E5%85%A5%E9%97%A8/"/>
      <url>/2018/09/10/git%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="git版本控制中几个重要概念"><a href="#git版本控制中几个重要概念" class="headerlink" title="git版本控制中几个重要概念"></a>git版本控制中几个重要概念</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.git init</span><br><span class="line">    初始化本地仓库 .git</span><br><span class="line">2.git add</span><br><span class="line">    文件路径，用来将变动加到暂存区</span><br><span class="line">3.git commit -v</span><br><span class="line">    提交时显示所有diff信息</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="使用git前配置"><a href="#使用git前配置" class="headerlink" title="使用git前配置"></a>使用git前配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 你的英文名</span><br><span class="line">git config --global user.email 你的邮箱</span><br><span class="line">git config --global push.default matching</span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br><span class="line">git config --global core.editor <span class="string">"vim"</span></span><br></pre></td></tr></table></figure><p>下面的命令可获得该终端的ssh key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git init //不要在已经初始化好的仓库使用，否则会将已经初始化完成的仓库覆盖</span><br><span class="line">git status //查看状态</span><br><span class="line">git add //提交文件放入暂存区</span><br><span class="line">git commit  //将暂存区的更新提交到本地仓库</span><br><span class="line">git push origin master //把当前本地仓库里的改动推送到远程仓库（origin）的master分支。之后可以直接git push。</span><br><span class="line">git pull //当远程仓库有变动但是本地仓库没有更新，会拒绝git push， 使用git pull将远程仓库拉到本地仓库，合并变动。</span><br><span class="line">git push -f origin master //强制推送，会覆盖别人的代码</span><br><span class="line">git remote add xxx git@xxx.git //再次添加一个远程仓库的标签</span><br><span class="line">git push xxx master //推送到xxx标签的地址</span><br><span class="line">git remote remove xxx //删除xxx标签</span><br><span class="line">git remote <span class="built_in">set</span>-url origin url //修改origin标签对应的地址</span><br><span class="line">git remote rename xxx coding //把xxx标签名修改为coding</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>打开 git bash，进入某目录后输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog -- 进入blog文件夹</span><br><span class="line">git init -- 初始化本地仓库，创建.git目录</span><br><span class="line">touch index.html -- 添加index.html文件</span><br><span class="line">git add index.html -- 将文件添加到暂存区 (也可以使用git add . 表示将当前目录内所有改动都加入暂存区)</span><br><span class="line">git commit index.html -m <span class="string">'添加index.html'</span> 告诉 git，这些文件我要加到仓库里(也可以一次性git commit -m <span class="string">"添加所有改动文件"</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git几个常用命令和一个命令查询工具</title>
      <link href="/2018/09/10/git%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/10/git%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="几个常用命令的使用方法"><a href="#几个常用命令的使用方法" class="headerlink" title="几个常用命令的使用方法"></a>几个常用命令的使用方法</h2><h3 id="ls-罗列"><a href="#ls-罗列" class="headerlink" title="ls  罗列"></a>ls  罗列</h3><pre><code>* ls 路径显示所有文件* ls -a 路径显示所有目录和文件（文件或目录名称为“.”的视为隐藏，不会列出）；* ls -l 路径以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等；* ls -al 路径在ls -l的基础上多显示以“.“开头的隐藏文件；</code></pre><a id="more"></a><hr><h3 id="cat-显示文件内容"><a href="#cat-显示文件内容" class="headerlink" title="cat  显示文件内容"></a>cat  显示文件内容</h3><pre><code>* cat m1在屏幕上显示文件ml的内容* cat m1 m2同时显示文件ml和m2的内容* cat m1 m2 &gt; file将文件ml和m2合并后放入文件file中</code></pre><hr><h3 id="mv-移动-重命名"><a href="#mv-移动-重命名" class="headerlink" title="mv  移动 / 重命名"></a>mv  移动 / 重命名</h3><pre><code>* mv 源路径 目标路径将某文件从源路径移动至目标路径* mv 1.txt 2.txt把 1.txt 移到 2.txt ，也就是重命名</code></pre><hr><h3 id="touch-触摸"><a href="#touch-触摸" class="headerlink" title="touch  触摸"></a>touch  触摸</h3><pre><code>* touch 1.txt创建1.txt文件 或 改变该文件的更新时间</code></pre><h2 id="explainshell-com-的使用"><a href="#explainshell-com-的使用" class="headerlink" title="explainshell.com 的使用"></a>explainshell.com 的使用</h2><ol><li>想知道某个命令的用法，搜索该命令就能展示其所有的用法。</li><li>在输入框内输入一段命令，这个网站就能帮助你解析该命令是如何工作的，简洁易懂。<br><img src="/2018/09/10/git命令/explainshell.jpg" alt="explainshell.com"></li></ol>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
