<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>CSS的一些知识点</title>
      <link href="/2018/09/14/CSS/"/>
      <url>/2018/09/14/CSS/</url>
      <content type="html"><![CDATA[<h3 id="引用CSS的四种方式"><a href="#引用CSS的四种方式" class="headerlink" title="引用CSS的四种方式"></a>引用CSS的四种方式</h3><ol><li>内联style属性</li><li>style标签</li><li>引用外部css文件 link标签</li><li>@import url(./style.css);</li></ol><a id="more"></a><h3 id="清除float导致浮动的办法"><a href="#清除float导致浮动的办法" class="headerlink" title="清除float导致浮动的办法"></a>清除float导致浮动的办法</h3><pre><code class="bash">.clearfix::after{    content: <span class="string">''</span>;    display: block;    clear: both;} </code></pre><ul><li>在float元素的父级元素上加上clearfix的class</li></ul><h3 id="元素的高度是由什么决定的？"><a href="#元素的高度是由什么决定的？" class="headerlink" title="元素的高度是由什么决定的？"></a>元素的高度是由什么决定的？</h3><ul><li>元素的高度，由其内部文档流元素的高度总和决定</li><li>文档流: 文档内元素的流动方向</li><li>尽量不写高度宽度，用padding和line-height解决，否则可能造成bug</li><li>字体较小的时候，可用line-height控制内联元素的高度 </li></ul><h3 id="中文会自动换行而英文不会"><a href="#中文会自动换行而英文不会" class="headerlink" title="中文会自动换行而英文不会"></a>中文会自动换行而英文不会</h3><p>可以用以下CSS属性解决</p><pre><code class="bash">word-break: <span class="built_in">break</span>-all;  使得一串英文会被打断 分开word-break: <span class="built_in">break</span>-word;   不会打断 分开</code></pre><h3 id="用CSS画三角形的方法"><a href="#用CSS画三角形的方法" class="headerlink" title="用CSS画三角形的方法"></a>用CSS画三角形的方法</h3><pre><code class="bash">.triangle{    border: 10px solid transparent;    width: 0px;    border-left-color: <span class="comment">#E6686A;</span>    border-top-width: 0px;}</code></pre><h3 id="背景图铺满整个背景"><a href="#背景图铺满整个背景" class="headerlink" title="背景图铺满整个背景"></a>背景图铺满整个背景</h3><p>用以下属性实现</p><pre><code class="bash">background-size:cover</code></pre><h3 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h3><p>　　position的含义是指定位类型，取值类型可以有：static、relative、absolute、fixed、inherit和sticky。</p><ol><li>position: static</li></ol><p>　　static(没有定位)是position的默认值，元素处于正常的文档流中，会忽略left、top、right、bottom和z-index属性。</p><ol start="2"><li>position: relative</li></ol><p>　　relative(相对定位)是指给元素设置相对于原本位置的定位，元素并不脱离文档流，因此元素原本的位置会被保留，其他的元素位置不会受到影响。</p><ol start="3"><li>position: absolute</li></ol><p>　　absolute(绝对定位)是指给元素设置绝对的定位，相对定位的对象可以分为两种情况：</p><p>　　1) 设置了absolute的元素如果存在有祖先元素设置了position属性为relative或者absolute，则这时元素的定位对象为此已设置position属性的祖先元素。</p><p>　　2) 如果并没有设置了position属性的祖先元素，则此时相对于body进行定位。</p><ol start="4"><li>position: fixed</li></ol><p>　　可以简单说fixed是特殊版的absolute，fixed元素总是相对于body定位的。</p><ol start="5"><li>inherit</li></ol><p>　　继承父元素的position属性，但需要注意的是IE8以及往前的版本都不支持inherit属性。</p><ol start="6"><li>sticky</li></ol><p>　　在屏幕范围（viewport）时该元素的位置并不受到定位影响（设置是top、left等属性无效），当该元素的位置将要移出偏移范围时，定位又会变成fixed，根据设置的left、top等属性成固定位置的效果。</p><ul><li>该部分可参考网站:<br>  <a href="http://www.cnblogs.com/s1nker/p/4835079.html" target="_blank" rel="noopener">http://www.cnblogs.com/s1nker/p/4835079.html</a></li></ul><h3 id="icon图标资源的网站"><a href="#icon图标资源的网站" class="headerlink" title="icon图标资源的网站"></a>icon图标资源的网站</h3><pre><code>* http://www.iconfont.cn阿里巴巴的矢量图标管理、交流平台。</code></pre>]]></content>
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML的常用标签和一些重要知识点</title>
      <link href="/2018/09/13/HTML-intro/"/>
      <url>/2018/09/13/HTML-intro/</url>
      <content type="html"><![CDATA[<h2 id="HTML标签的一些知识点"><a href="#HTML标签的一些知识点" class="headerlink" title="HTML标签的一些知识点"></a>HTML标签的一些知识点</h2><h3 id="a-标签-超链接"><a href="#a-标签-超链接" class="headerlink" title="a 标签 超链接"></a>a 标签 超链接</h3><blockquote><p>跳转页面<strong><em>（HTTP GET 请求）</em></strong><br>  属性见 MDN：<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a</a></p></blockquote><ul><li>href：指定链接地址</li><li>target：规定“href”属性中指定的网页或文件以何种方式行进跳转或打开，其值包括：_blank、_self、_parent、_top以及iframe的name属性的值</li></ul><a id="more"></a><h4 id="特别的使用方法"><a href="#特别的使用方法" class="headerlink" title="特别的使用方法"></a>特别的使用方法</h4><ol><li><p>锚点</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"#top"</span>&gt;link&lt;/a&gt;</span><br></pre></td></tr></table></figure><pre><code>只有锚点不发送get请求。&quot;#top&quot;即点击回到页面顶部。</code></pre></li><li><p>下载</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"https://qq.com"</span> download&gt;下 载&lt;/a&gt;</span><br></pre></td></tr></table></figure><pre><code>1. 加上“download”属性，可下载文件:下载.html。若不加https:或http:  会变成file协议。2. 那么如果不加download能下载吗？若目标http响应写了Content-type: application/octet-stream浏览器也会以下载的形式接受请求。若Content-type: text/html 则不会。</code></pre></li><li>伪协议 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"javascript:;"</span>&gt;link&lt;/a&gt;  满足需求:点击但不进行任何操作。</span><br><span class="line">&lt;a href=<span class="string">"javascript:alert(1)"</span>&gt;link&lt;/a&gt;   点击运行此JS。</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>查询请求</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"?name=xxx"</span>&gt;link&lt;/a&gt;</span><br></pre></td></tr></table></figure><pre><code>自动把?name=xxx加进地址栏，发起get请求。</code></pre></li><li><p>文件路径</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"xxx.html"</span> download&gt;QQ&lt;/a&gt;</span><br></pre></td></tr></table></figure><pre><code>相对路径，点击可打开同目录下的xxx.html</code></pre></li></ol><hr><h3 id="form-标签-表单"><a href="#form-标签-表单" class="headerlink" title="form 标签 表单"></a>form 标签 表单</h3><blockquote><p>跳转页面<strong><em>（HTTP POST 请求）</em></strong><br>  属性见 MDN：<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"users"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h4 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h4><blockquote><p>如果form里没提交按钮就不能提交。</p></blockquote><blockquote><p>向users路径发送post请求。</p></blockquote><blockquote><p>若输入xxx和yyy并提交，发送post请求的第四部分数据为username=xxx&amp;password=yyy<br>若输入的是中文并提交，发送post请求的数据 xxx和yyy 会转义为utf-8字符。</p></blockquote><blockquote><p>name <strong><em>必须</em></strong> 要写，不写的话提交的时候不会带上你的数据。</p></blockquote><hr><h3 id="input-button-输入-按钮"><a href="#input-button-输入-按钮" class="headerlink" title="input / button 输入 / 按钮"></a>input / button 输入 / 按钮</h3><blockquote><p>区别：是否为「空标签」<br>  input 的属性见：<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input</a><br>  button 的属性见：<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button</a></p></blockquote><h4 id="使用注意事项-1"><a href="#使用注意事项-1" class="headerlink" title="使用注意事项"></a>使用注意事项</h4><ol><li><p>如果一个form里只有一个按钮</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;提交&lt;/button&gt; 则浏览器会默认为<span class="built_in">type</span> = <span class="string">"submit"</span>，是一个普通的按钮</span><br><span class="line">&lt;button <span class="built_in">type</span>= <span class="string">"button"</span> &gt;提交&lt;/button&gt; 不会提交，是一个普通的按钮</span><br><span class="line">&lt;input <span class="built_in">type</span>= <span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt; 是一个提交按钮</span><br><span class="line">&lt;input value=<span class="string">"提交"</span>&gt; 不会提交，是一个普通的按钮</span><br></pre></td></tr></table></figure></li><li><p>实现点击文字勾上复选框</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=”checkbox” id=”XXX”&gt;&lt;label <span class="keyword">for</span>=”XXX”&gt;你好&lt;/label&gt;</span><br></pre></td></tr></table></figure><pre><code>点击&quot;你好&quot;，复选框也一起勾选了</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;用户名&lt;input <span class="built_in">type</span>=”text” name=”username”&gt;&lt;/label&gt; </span><br><span class="line">&lt;label&gt;密码&lt;input <span class="built_in">type</span>=”password” name=”password”&gt;&lt;/label&gt; </span><br><span class="line">&lt;label&gt;&lt;input <span class="built_in">type</span>=”checkbox” name=”agree”&gt;同意&lt;/label&gt;</span><br></pre></td></tr></table></figure><pre><code>用label把input包住，也能实现点击文字勾上复选框。</code></pre></li><li><p>name一定要写的一样，才能复选 / 单选，并在发送请求时提交到服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;label&gt;&lt;input <span class="built_in">type</span>=”checkBox” name=”fruit” value=<span class="string">"yes"</span>&gt;香蕉&lt;/label&gt;</span><br><span class="line">&lt;label&gt;&lt;input <span class="built_in">type</span>=”checkBox” name=”fruit” value=<span class="string">"no"</span>&gt;橘子&lt;/label&gt;  </span><br><span class="line">&lt;label&gt;&lt;input <span class="built_in">type</span>=”radio” name=”YorN” value=<span class="string">"yes"</span>&gt;Yes&lt;/label&gt;</span><br><span class="line">&lt;label&gt;&lt;input <span class="built_in">type</span>=”radio” name=”YorN” value=<span class="string">"no"</span>&gt;No&lt;/label&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="table-标签-表格"><a href="#table-标签-表格" class="headerlink" title="table 标签 表格"></a>table 标签 表格</h3><blockquote><p>用于展示数据<br>  属性见：<br>  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table</a></p></blockquote><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><p>thead：表头（表格标题及头部信息不等）<br>tbody：表中（表格显示的内容部分）<br>tfoot：表尾（表格说明与备注部分）<br>tr：行<br>th：单元格，作为行或列的标题呈现<br>td：单元格，作为内容单元格呈现<br>caption：表格主标题，位于表格之外</p><h4 id="表格常用属性"><a href="#表格常用属性" class="headerlink" title="表格常用属性"></a>表格常用属性</h4><p>width/height：设置宽度/高度<br>border：设置边框<br>align：设置表格对齐方式（left/center/right）<br>cellspacing：设置单元格与单元格之间的间距<br>cellpadding：设置单元格与内容之间的间距<br>bgcolor：设置表格背景颜色<br>background：设置背景图片<br>colspan：跨列 ‘<td colspan="2"></td>’<br>rowspan：跨行 ‘<td rowspan="2"></td>’</p><hr><h2 id="HTML其他常见标签"><a href="#HTML其他常见标签" class="headerlink" title="HTML其他常见标签"></a>HTML其他常见标签</h2><h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><ul><li>标题：h1~h6</li><li>文本：span</li><li>段落：p</li><li>强调：em</li><li>粗体：b</li><li>斜体：i</li><li>删除线：s</li><li>上标：sup</li><li>下标：sub</li></ul><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><ul><li>头部：header</li><li>尾部：footer</li><li>导航：nav</li><li>文章：article</li><li>章节：section</li><li>侧栏：aside</li><li>地址：address</li><li>时间：time</li><li>标记：mark</li><li>布局：div</li><li>引用：blockquote</li><li>文档主要内容：main （块级标签）</li><li>详细信息：details，一般与 summary 标签一起使用，summary 作为details的第一个子标签使用</li></ul><h3 id="格式化标签"><a href="#格式化标签" class="headerlink" title="格式化标签"></a>格式化标签</h3><ul><li>换行：br</li><li>水平分割线：hr</li></ul><h3 id="img-标签-图片"><a href="#img-标签-图片" class="headerlink" title="img 标签 图片"></a>img 标签 图片</h3><ul><li>src：指定图片链接地址（必须）</li><li>width/height：设置宽度/高度</li><li>title：设置图片标题，鼠标悬浮在图片上时显示</li><li>alt：设置提示，当图片加载失败时会显示</li></ul><hr><h2 id="HTML-元素类别"><a href="#HTML-元素类别" class="headerlink" title="HTML 元素类别"></a>HTML 元素类别</h2><ul><li>块级元素（block）</li><li>行内元素（inline）</li><li>行内块元素（inline-block）。</li></ul><h3 id="display：block"><a href="#display：block" class="headerlink" title="display：block"></a>display：block</h3><p>block元素会独占一行，多个block元素会各自新起一行。默认情况下，block元素宽度自动填满其父元素的宽度。block元素可以设置width、height属性。块级元素及时设置了宽度，仍然会独占一行。block元素可以设置margin、padding属性。</p><h3 id="display：inline"><a href="#display：inline" class="headerlink" title="display：inline"></a>display：inline</h3><p>inline元素不会独占一行，多个相邻的行内元素会排在同一行里，直到一行排列不下，才会新换行，其宽度随元素的内容而变化。inline元素设置width、height属性无效。inline元素的margin和padding属性，水平方向的padding-left、padding-right、margin-left、margin-right都产生边距效果，但竖直方向的padidng-top、padding-bottom、margin-top以及margin-bottom不会产生边距效果。</p><h3 id="display：inline-block"><a href="#display：inline-block" class="headerlink" title="display：inline-block"></a>display：inline-block</h3><p>简单来说就是将对象呈现为inline对象，但是对象的内容作为block对象呈现。之后的内联对象会被排列在同一行内。比如我们可以给一个link（a元素）inline-block属性值，使其具有block的宽度高度特性又具有inline的同行特性。</p><hr><h2 id="补充和总结"><a href="#补充和总结" class="headerlink" title="补充和总结"></a>补充和总结</h2><ol><li>a标签的一些特别用法，见上文。</li><li>input和button的一些使用注意，见上文。</li><li>表单提交时，发送请求会带有表单中的数据，name属性必须写，具体见上文form部分。</li><li>Contenteditable属性可使元素内容可编辑。   </li><li>colgroup标签可调整表格各栏的宽度，很方便。</li></ol><hr><blockquote><p>参考博客<br>  <a href="https://blog.csdn.net/hierarch_lee/article/details/54236380" target="_blank" rel="noopener">https://blog.csdn.net/hierarch_lee/article/details/54236380</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP的请求与响应</title>
      <link href="/2018/09/11/HTTP-intro/"/>
      <url>/2018/09/11/HTTP-intro/</url>
      <content type="html"><![CDATA[<h2 id="Server-Client-HTTP"><a href="#Server-Client-HTTP" class="headerlink" title="Server + Client + HTTP"></a>Server + Client + HTTP</h2><pre><code>* 浏览器负责发起请求* 服务器在 80 端口接收请求* 服务器负责返回内容（响应）* 浏览器负责下载响应内容HTTP 的作用就是指导浏览器和服务器如何进行沟通。</code></pre><a id="more"></a><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h3><p>输入以下命令：</p><pre><code class="bash">curl -s -v -H <span class="string">"Allen: xxx"</span> -- <span class="string">"https://www.baidu.com"</span></code></pre><p>请求的内容为：</p><pre><code class="bash">GET / HTTP/1.1Host: www.baidu.comUser-Agent: curl/7.54.0Accept: */*Allen: xxx</code></pre><h3 id="请求的格式"><a href="#请求的格式" class="headerlink" title="请求的格式"></a>请求的格式</h3><pre><code class="bash">1 动词 路径 协议/版本2 Key1: value12 Key2: value22 Key3: value32 Content-Type: application/x-www-form-urlencoded2 Host: www.baidu.com2 User-Agent: curl/7.54.03 4 要上传的数据</code></pre><pre><code>1. 请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）2. 第三部分永远都是一个回车（\n）3. 动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等4. 这里的路径包括「查询参数」，但不包括「锚点」5. 如果你没有写路径，那么路径默认为 /6. 第 2 部分中的 Content-Type 标注了第 4 部分的格式</code></pre><h3 id="如何用-Chrome-查看响应"><a href="#如何用-Chrome-查看响应" class="headerlink" title="如何用 Chrome 查看响应"></a>如何用 Chrome 查看响应</h3><pre><code>1. 打开 Network2. 地址栏输入网址3. 在 Network 点击，查看 request，点击「view source」4. 点击「view source」后可以看到请求的前三部分5. 如果有请求的第四部分，那么在 FormData 或 Payload 里面可以看到</code></pre><hr><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h3 id="请求示例-1"><a href="#请求示例-1" class="headerlink" title="请求示例"></a>请求示例</h3><p>对应上面请求的响应如下：</p><pre><code class="bash">HTTP/1.1 200 OKAccept-Ranges: bytesCache-Control: private, no-cache, no-store, proxy-revalidate, no-transformConnection: Keep-AliveContent-Length: 2443Content-Type: text/htmlDate: Tue, 10 Oct 2017 09:14:05 GMTEtag: <span class="string">"5886041d-98b"</span>Last-Modified: Mon, 23 Jan 2017 13:24:45 GMTPragma: no-cacheServer: bfe/1.0.8.18Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt; 后面太长，省略……</code></pre><h3 id="响应的格式"><a href="#响应的格式" class="headerlink" title="响应的格式"></a>响应的格式</h3><pre><code class="bash">1 协议/版本号 状态码 状态解释2 Key1: value12 Key2: value22 Content-Length: 179312 Content-Type: text/html34 要下载的内容</code></pre><pre><code>* 状态码大概记一下，是服务器对浏览器说的话    * 1xx 不常用    * 2xx 表示成功    * 3xx 表示滚吧    * 4xx 表示你丫错了    * 5xx 表示好吧，我错了* 状态解释没什么用* 第 2 部分中的 Content-Type 标注了第 4 部分的格式* 第 2 部分中的 Content-Type 遵循 MIME 规范</code></pre><h3 id="如何用-Chrome-查看响应-1"><a href="#如何用-Chrome-查看响应-1" class="headerlink" title="如何用 Chrome 查看响应"></a>如何用 Chrome 查看响应</h3><pre><code>1. 打开 Network2. 输入网址3. 选中第一个响应4. 查看 Response Headers，点击「view source」5. 点击「view source」后你会看到响应的前两部分6. 查看 Response 或者 Preview，你会看到响应的第 4 部分</code></pre><hr><ul><li>Chrome开发者工具查看 HTTP 请求与响应可详见：<a href="https://www.jianshu.com/p/a08134dbee23" target="_blank" rel="noopener">https://www.jianshu.com/p/a08134dbee23</a></li></ul><hr><h2 id="如何使用-curl-命令？"><a href="#如何使用-curl-命令？" class="headerlink" title="如何使用 curl 命令？"></a>如何使用 curl 命令？</h2><p>在Linux中curl是一个利用URL规则在命令行下工作的文件传输工具，可以说是一款很强大的http命令行工具。它支持文件的上传和下载，是综合传输工具，但按传统，习惯称url为下载工具。</p><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><pre><code class="bash"><span class="comment"># curl [option] [url]</span></code></pre><h3 id="常见参数："><a href="#常见参数：" class="headerlink" title="常见参数："></a>常见参数：</h3><pre><code class="bash">-A/--user-agent &lt;string&gt;              设置用户代理发送给服务器-b/--cookie &lt;name=string/file&gt;    cookie字符串或文件读取位置-c/--cookie-jar &lt;file&gt;                    操作结束后把cookie写入到这个文件中-C/--<span class="built_in">continue</span>-at &lt;offset&gt;            断点续转-D/--dump-header &lt;file&gt;              把header信息写入到该文件中-e/--referer                                  来源网址-f/--fail                                          连接失败时不显示http错误-o/--output                                  把输出写到该文件中-O/--remote-name                      把输出写到该文件中，保留远程文件的文件名-r/--range &lt;range&gt;                      检索来自HTTP/1.1或FTP服务器字节范围-s/--silent                                    静音模式。不输出任何东西-T/--upload-file &lt;file&gt;                  上传文件-u/--user &lt;user[:password]&gt;      设置服务器的用户和密码-w/--write-out [format]                什么输出完成后-x/--proxy &lt;host[:port]&gt;              在给定的端口上使用HTTP代理-<span class="comment">#/--progress-bar                        进度条显示当前的传送状态</span></code></pre><ul><li>curl命令的更多用法可详见：<a href="http://man.linuxde.net/curl" target="_blank" rel="noopener">http://man.linuxde.net/curl</a></li></ul>]]></content>
      
      <categories>
          
          <category> HTTP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建Hexo博客（Next主题）过程中碰到的问题</title>
      <link href="/2018/09/11/Hexo/"/>
      <url>/2018/09/11/Hexo/</url>
      <content type="html"><![CDATA[<p>该主题的github主页：<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> </p><h2 id="侧边菜单修改却无法访问"><a href="#侧边菜单修改却无法访问" class="headerlink" title="侧边菜单修改却无法访问"></a>侧边菜单修改却无法访问</h2><p>在next的_config.yml文件中修改menu配置，添加tag和categories选项，但点击会出现404页面。</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>在根目录执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"tags"</span> </span><br><span class="line">hexo new page <span class="string">"categories"</span></span><br></pre></td></tr></table></figure></p><p>打开它们并相应添加type: “tags”和type: “categories”，保存</p><a id="more"></a><hr><h2 id="安装搜索功能-Local-Search"><a href="#安装搜索功能-Local-Search" class="headerlink" title="安装搜索功能 Local Search"></a>安装搜索功能 Local Search</h2><p>在next的_config.yml文件中修改Local Search的enable: true后，搜索功能仍无效</p><h3 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h3><p>安装 hexo-generator-search和 hexo-generator-searchdb</p><p>在根目录下执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p><p>在根目录的_config.yml文件中添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git入门</title>
      <link href="/2018/09/10/git%E5%85%A5%E9%97%A8/"/>
      <url>/2018/09/10/git%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="git版本控制中几个重要概念"><a href="#git版本控制中几个重要概念" class="headerlink" title="git版本控制中几个重要概念"></a>git版本控制中几个重要概念</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.git init</span><br><span class="line">    初始化本地仓库 .git</span><br><span class="line">2.git add</span><br><span class="line">    文件路径，用来将变动加到暂存区</span><br><span class="line">3.git commit -v</span><br><span class="line">    提交时显示所有diff信息</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="使用git前配置"><a href="#使用git前配置" class="headerlink" title="使用git前配置"></a>使用git前配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 你的英文名</span><br><span class="line">git config --global user.email 你的邮箱</span><br><span class="line">git config --global push.default matching</span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br><span class="line">git config --global core.editor <span class="string">"vim"</span></span><br></pre></td></tr></table></figure><p>下面的命令可获得该终端的ssh key<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git init //不要在已经初始化好的仓库使用，否则会将已经初始化完成的仓库覆盖</span><br><span class="line">git status //查看状态</span><br><span class="line">git add //提交文件放入暂存区</span><br><span class="line">git commit  //将暂存区的更新提交到本地仓库</span><br><span class="line">git push origin master //把当前本地仓库里的改动推送到远程仓库（origin）的master分支。之后可以直接git push。</span><br><span class="line">git pull //当远程仓库有变动但是本地仓库没有更新，会拒绝git push， 使用git pull将远程仓库拉到本地仓库，合并变动。</span><br><span class="line">git push -f origin master //强制推送，会覆盖别人的代码</span><br><span class="line">git remote add xxx git@xxx.git //再次添加一个远程仓库的标签</span><br><span class="line">git push xxx master //推送到xxx标签的地址</span><br><span class="line">git remote remove xxx //删除xxx标签</span><br><span class="line">git remote <span class="built_in">set</span>-url origin url //修改origin标签对应的地址</span><br><span class="line">git remote rename xxx coding //把xxx标签名修改为coding</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>打开 git bash，进入某目录后输入以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog -- 进入blog文件夹</span><br><span class="line">git init -- 初始化本地仓库，创建.git目录</span><br><span class="line">touch index.html -- 添加index.html文件</span><br><span class="line">git add index.html -- 将文件添加到暂存区 (也可以使用git add . 表示将当前目录内所有改动都加入暂存区)</span><br><span class="line">git commit index.html -m <span class="string">'添加index.html'</span> 告诉 git，这些文件我要加到仓库里(也可以一次性git commit -m <span class="string">"添加所有改动文件"</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git几个常用命令和一个命令查询工具</title>
      <link href="/2018/09/10/git%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/10/git%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="几个常用命令的使用方法"><a href="#几个常用命令的使用方法" class="headerlink" title="几个常用命令的使用方法"></a>几个常用命令的使用方法</h2><h3 id="ls-罗列"><a href="#ls-罗列" class="headerlink" title="ls  罗列"></a>ls  罗列</h3><pre><code>* ls 路径显示所有文件* ls -a 路径显示所有目录和文件（文件或目录名称为“.”的视为隐藏，不会列出）；* ls -l 路径以长格式显示目录下的内容列表。输出的信息从左到右依次包括文件名，文件类型、权限模式、硬连接数、所有者、组、文件大小和文件的最后修改时间等；* ls -al 路径在ls -l的基础上多显示以“.“开头的隐藏文件；</code></pre><a id="more"></a><hr><h3 id="cat-显示文件内容"><a href="#cat-显示文件内容" class="headerlink" title="cat  显示文件内容"></a>cat  显示文件内容</h3><pre><code>* cat m1在屏幕上显示文件ml的内容* cat m1 m2同时显示文件ml和m2的内容* cat m1 m2 &gt; file将文件ml和m2合并后放入文件file中</code></pre><hr><h3 id="mv-移动-重命名"><a href="#mv-移动-重命名" class="headerlink" title="mv  移动 / 重命名"></a>mv  移动 / 重命名</h3><pre><code>* mv 源路径 目标路径将某文件从源路径移动至目标路径* mv 1.txt 2.txt把 1.txt 移到 2.txt ，也就是重命名</code></pre><hr><h3 id="touch-触摸"><a href="#touch-触摸" class="headerlink" title="touch  触摸"></a>touch  触摸</h3><pre><code>* touch 1.txt创建1.txt文件 或 改变该文件的更新时间</code></pre><h2 id="explainshell-com-的使用"><a href="#explainshell-com-的使用" class="headerlink" title="explainshell.com 的使用"></a>explainshell.com 的使用</h2><ol><li>想知道某个命令的用法，搜索该命令就能展示其所有的用法。</li><li>在输入框内输入一段命令，这个网站就能帮助你解析该命令是如何工作的，简洁易懂。<br><img src="/2018/09/10/git命令/explainshell.jpg" alt="explainshell.com"></li></ol>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
